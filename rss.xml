<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JOON</title>
        <link>https://cloud-Xolt.github.io/</link>
        <description>人总是善忘的，总有一些事情值得记录，等自己老了，回过头看看自己这一生走过的路。</description>
        <generator>Hugo 0.120.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>wo2g9cai@gmail.com (JOON)</managingEditor>
        
        
            <webMaster>wo2g9cai@gmail.com (JOON)</webMaster>
        
        
        <lastBuildDate>Mon, 18 Dec 2023 13:14:02 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://cloud-Xolt.github.io/rss.xml" />
        
        
            <item>
                <title>CVE-2023-5044：NGINX Ingress再曝注入漏洞</title>
                <link>https://cloud-Xolt.github.io/posts/cve/nginx-cve-2023-5044/</link>
                <guid isPermaLink="true">https://cloud-Xolt.github.io/posts/cve/nginx-cve-2023-5044/</guid>
                <pubDate>Mon, 18 Dec 2023 13:11:03 &#43;0800</pubDate>
                
                    <author>wo2g9cai@gmail.com (JOON)</author>
                
                
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;专题 《云原生安全攻防》 标签 CVE ingress-nginx K8s 云原生安全 API网关&lt;/br&gt;
首发于&lt;a href=&#34;https://mp.weixin.qq.com/s/ERrR_0Lo5tTG6VWjB16PHA&#34;&gt;创新研究院官方博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引言：&lt;/p&gt;
&lt;p&gt;随着云原生技术的广泛应用，Kubernetes已成为容器编排平台的事实标准。Ingress
Controller为Kubernetes（以及其他容器化）环境的专用负载均衡器，Ingress
Controller抽象了 Kubernetes
应用程序流量路由的复杂性，并在Kubernetes服务与外部服务之间架起了一座桥梁[1]。&lt;/p&gt;
&lt;p&gt;作为Kubernetes环境中最受欢迎的Ingress Controller之一，NGINX
Ingress扮演着重要的角色。然而，接连披露的组件漏洞给使用NGINX
Ingress的用户带来了严重的安全风险。本文将针对此漏洞进行复现和分析，并带来一些思考。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;漏洞背景&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就在不久前，Jan-Otto Kröpke (Cloudeteer GmbH)报告了一个NGINX
Ingress的安全问题，攻击者可通过“nginx.ingress.kubernetes.io/permanent-redirect”注入特定命令，并获取
NGINX Ingress
Controller的账号凭据[2]。此问题被认定为高风险安全漏洞，并被命名为CVE-2023-5044。版本号小于1.9.0的NGINX
Ingress环境均受到安全威胁，需要特殊说明的是，1.2.0版本的“chrooted” NGINX
Ingress环境虽然可以执行命令，但不能提取凭证，因此不属于高风险。&lt;/p&gt;
&lt;p&gt;从2021年CVE-2021-25742 漏洞被公开起始，针对NGINX
Ingress的“公开较量”便持续上演。如图1.1所示，从攻击利用到加黑封禁、再到绕过利用，CVE的演变直接体现了维护者和攻击者之间持续博弈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image1.png&#34;
style=&#34;width:5.76806in;height:3.82778in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1.1 NGINX Ingress漏洞&lt;/p&gt;
&lt;p&gt;多年来，NGINX Ingress备受攻击者的关注，其原因大致有三个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;NGINX Ingress在市场中热度较高，影响范围广；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开源项目，为漏洞挖掘和修复绕过提供了良好的条件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;架构特性为攻击利用活动提供了温床；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;笔者认为，其业务面和控制面不分离的架构属性，正是诸多漏洞被频频利用的根本原因。与Kong
Ingress等业务面和控制面分离架构的Controller不同的是，如图1.2红框中所示[3]，Ingress
Controller(IC)进程和NGINX Web(NGINX)代理进程运行在IC
Pod中的同一个容器中，故NGINX Web 代理进程具备对 Ingress
控制器资源的访问权限，而巧合的是，默认情况下NGINX Ingress Controller
的服务账号在集群中拥有一个较高的权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image2.png&#34;
style=&#34;width:5.76806in;height:3.92639in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1.2 NGINX Ingress业务和控制入口流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;漏洞分析与原理解析&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;21-漏洞成因&#34;&gt;2.1 漏洞成因&lt;/h2&gt;
&lt;p&gt;“&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md#permanent-redirect&#34;&gt;nginx.ingress.kubernetes.io/permanent-redirect&lt;/a&gt;”是Nginx
Ingress中的一个永久重定向的注释配置项，NGINX
Ingress官方Github上显示，此注释项值为String类型[4]。&lt;/p&gt;
&lt;p&gt;该漏洞的根因是Nginx
Ingress在默认情况下(不含需用户额外配置的校验如“&lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#annotation-value-word-blocklist&#34;&gt;annotation-value-word-blocklist&lt;/a&gt;”)缺少对“permanent-redirect”进行有效约束而导致的。以1.8.0版本（该版本受到漏洞影响）代码为例，internal/ingress/annotations/redirect/redirect.go核心代码如下：&lt;/p&gt;
&lt;p&gt;func (r redirect) Parse(ing *networking.Ingress) (interface{}, error) {&lt;/p&gt;
&lt;p&gt;r3w, _ := parser.GetBoolAnnotation(&amp;quot;from-to-www-redirect&amp;quot;, ing)&lt;/p&gt;
&lt;p&gt;…&lt;br&gt;
pr, err := parser.GetStringAnnotation(&amp;quot;permanent-redirect&amp;quot;, ing)&lt;br&gt;
if err != nil &amp;amp;&amp;amp; !errors.IsMissingAnnotations(err) {&lt;br&gt;
return nil, err&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;prc, err := parser.GetIntAnnotation(&amp;quot;permanent-redirect-code&amp;quot;, ing)&lt;br&gt;
if err != nil &amp;amp;&amp;amp; !errors.IsMissingAnnotations(err) {&lt;br&gt;
return nil, err&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;if prc &amp;lt; http.StatusMultipleChoices || prc &amp;gt;
http.StatusPermanentRedirect {&lt;br&gt;
prc = defaultPermanentRedirectCode&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;if pr != &amp;quot;&amp;quot; || r3w {&lt;br&gt;
return &amp;amp;Config{&lt;br&gt;
URL: pr,&lt;br&gt;
Code: prc,&lt;br&gt;
FromToWWW: r3w,&lt;br&gt;
}, nil&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;return nil, errors.ErrMissingAnnotations&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;上述代码为永久和临时重定向注释的解析，该代码逻辑并未针对“permanent-redirect”值进行校验，仅将Ingress结构体传给“parser.GetIntAnnotation”提取字符串格式的“permanent-redirect”的值（上述代码标红部分），接下来我们看看internal/ingress/annotations/parser/main.go
中的parser.GetIntAnnotation方法：&lt;/p&gt;
&lt;p&gt;// GetStringAnnotation extracts a string from an Ingress annotation&lt;/p&gt;
&lt;p&gt;func GetStringAnnotation(name string, ing *networking.Ingress) (string,
error) {&lt;/p&gt;
&lt;p&gt;v := GetAnnotationWithPrefix(name)&lt;/p&gt;
&lt;p&gt;err := checkAnnotation(v, ing)&lt;/p&gt;
&lt;p&gt;if err != nil {&lt;/p&gt;
&lt;p&gt;return &amp;quot;&amp;quot;, err&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;return ingAnnotations(ing.GetAnnotations()).parseString(v)&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;该函数中“checkAnnotation”对“permanent-redirect”的值做了校验，定位到当前文件的95行，校验代码为：&lt;/p&gt;
&lt;p&gt;func checkAnnotation(name string, ing *networking.Ingress) error {&lt;/p&gt;
&lt;p&gt;if ing == nil || len(ing.GetAnnotations()) == 0 {&lt;/p&gt;
&lt;p&gt;return errors.ErrMissingAnnotations&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;if name == &amp;quot;&amp;quot; {&lt;/p&gt;
&lt;p&gt;return errors.ErrInvalidAnnotationName&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;return nil&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;函数中仅校验了注释类型非空、注释结构体非空。这便是造成CVE-2023-5044漏洞的成因。&lt;/p&gt;
&lt;h2 id=&#34;22-利用分析&#34;&gt;2.2 利用分析&lt;/h2&gt;
&lt;p&gt;接下来笔者以重定向到“https://github.com/cloud-Xolt/CVE”为例，分析Nginx
Ingress发生的变化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义一个Ingress yaml配置文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;# test.yaml&lt;/p&gt;
&lt;p&gt;apiVersion: networking.k8s.io/v1&lt;br&gt;
kind: Ingress&lt;br&gt;
metadata:&lt;br&gt;
name: news-test&lt;br&gt;
annotations:&lt;br&gt;
kubernets.io/ingress.class: nginx&lt;br&gt;
nginx.ingress.kubernetes.io/permanent-redirect:
&lt;a href=&#34;https://github.com/cloud-Xolt/CVE&#34;&gt;https://github.com/cloud-Xolt/CVE&lt;/a&gt;&lt;br&gt;
spec:&lt;br&gt;
ingressClassName: nginx&lt;br&gt;
rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host: zhangxiaoyong.cn&lt;br&gt;
http:&lt;br&gt;
paths:&lt;/li&gt;
&lt;li&gt;path: /&lt;br&gt;
pathType: Prefix&lt;br&gt;
backend:&lt;br&gt;
service:&lt;br&gt;
name: service-1&lt;br&gt;
port:&lt;br&gt;
number: 80&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;根据配置文件创建资源，验证是否生效&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如图2.2.1所示，应用文件后，请求对应链接，成功返回301重定向。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image3.png&#34;
style=&#34;width:5.76806in;height:0.72778in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2.2.1 重定向ingress资源创建&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Nginx配置信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进入对应的ingress-nginx-controller Pod中，在Nginx
Config文件中，如图2.2.2所示，多了一个“return 301”的配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image4.png&#34;
style=&#34;width:5.76806in;height:1.81042in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2.2.2 Nginx的永久重定向配置&lt;/p&gt;
&lt;p&gt;Ingress
yaml中的关键配置是“nginx.ingress.kubernetes.io/permanent-redirect:
&lt;a href=&#34;https://github.com/cloud-Xolt/CVE&#34;&gt;https://github.com/cloud-Xolt/CVE&lt;/a&gt;”，而Nginx Config文件中体现的是“return
301
&lt;a href=&#34;https://github.com/cloud-Xolt/CVE;&#34;&gt;https://github.com/cloud-Xolt/CVE;&lt;/a&gt;”，即使不深入代码逻辑，也能进一步猜想，Nginx
Config文件中的”https://github.com/cloud-Xolt/CVE”直接被拼接到了“return
301
”的后面并且加上“;”，以此为思路，也就不难理解整个注入流程了。至此笔者已经找到注入的思路，接下来需要探寻注入的内容。&lt;/p&gt;
&lt;p&gt;如图2.2.3所示，进入ingress-nginx-controller的Pod后进行权限和敏感文件发现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image5.png&#34;
style=&#34;width:5.76806in;height:2.12917in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2.2.3 ingress-nginx-controller容器权限收集&lt;/p&gt;
&lt;p&gt;进行简单查看后，笔者决定使用Bash权限和/tmp权限来反弹Shell，从而达到控制容器的效果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;环境构建&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;31环境信息&#34;&gt;3.1环境信息&lt;/h2&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 23%&#34; /&gt;
&lt;col style=&#34;width: 39%&#34; /&gt;
&lt;col style=&#34;width: 36%&#34; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;类型&lt;/td&gt;
&lt;td&gt;名称&lt;/td&gt;
&lt;td&gt;版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;td&gt;Ubuntu&lt;/td&gt;
&lt;td&gt;18.04.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;集群编排工具&lt;/td&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;1.28.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;运行时&lt;/td&gt;
&lt;td&gt;Contained&lt;/td&gt;
&lt;td&gt;1.6.21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Ingress Controller&lt;/td&gt;
&lt;td&gt;NGINX Ingress&lt;/td&gt;
&lt;td&gt;1.8.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;32环境搭建&#34;&gt;3.2环境搭建&lt;/h2&gt;
&lt;p&gt;基础系统和集群编排工具的安装步骤此处不再赘述，部署完成后查询集群信息如图3.2.1所示即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image6.png&#34;
style=&#34;width:5.76806in;height:0.62639in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3.2.1 集群环境信息&lt;/p&gt;
&lt;p&gt;接下来需要安装NGINX Ingress组件，以下是大致的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置文件修改&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;笔者采用Deployment的方式进行部署，yaml文件参照官方给出的部署指导[5]。需要注意的是这里要替换一下组件的镜像源，笔者替换的信息如图3.2.2所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image7.png&#34;
style=&#34;width:5.76806in;height:0.43194in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3.2.2 NGINX Ingress镜像源处理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装组件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如图3.2.3所示，在master节点执行命令“kubectl apply -f
ingress-nginx-1.8.0.yaml”创建组件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image8.png&#34;
style=&#34;width:5.76806in;height:1.88958in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3.2.3 创建NGINX Ingress组件&lt;/p&gt;
&lt;p&gt;如图3.2.4所示，确保组件运行正常，需要说明的是，图中两个ingress-nginx-admission
Pod
的READY状态是由于“no_proxy”设置的官方bug。由于不影响本次复现，故没有做进一步的修改[6]。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image9.png&#34;
style=&#34;width:5.76806in;height:0.44792in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3.2.4 NGINX Ingress部署完成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建测试服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了方便快捷，笔者直接使用NGINX基础镜像进行构建：&lt;/p&gt;
&lt;p&gt;# app-nginx.yaml&lt;/p&gt;
&lt;p&gt;apiVersion: apps/v1&lt;br&gt;
kind: Deployment&lt;br&gt;
metadata:&lt;br&gt;
name: nginx-app&lt;br&gt;
spec:&lt;br&gt;
selector:&lt;br&gt;
matchLabels:&lt;br&gt;
app: test-app&lt;br&gt;
replicas: 1&lt;br&gt;
template:&lt;br&gt;
metadata:&lt;br&gt;
labels:&lt;br&gt;
app: test-app&lt;br&gt;
spec:&lt;br&gt;
containers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: nginx&lt;br&gt;
image: nginx:latest&lt;br&gt;
ports:&lt;/li&gt;
&lt;li&gt;containerPort: 80&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;apiVersion: v1&lt;br&gt;
kind: Service&lt;br&gt;
metadata:&lt;br&gt;
name: service-1&lt;br&gt;
spec:&lt;br&gt;
selector:&lt;br&gt;
app: test-app&lt;br&gt;
ports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: name-of-service-port&lt;br&gt;
protocol: TCP&lt;br&gt;
port: 80&lt;br&gt;
targetPort: 80&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图3.2.5所示, 笔者使用配置文件成功创建了测试服务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image10.png&#34;
style=&#34;width:5.76806in;height:0.75556in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3.2.5 创建测试服务&lt;/p&gt;
&lt;p&gt;进入刚刚创建的Pod中，如图3.2.6所示，创建一个测试的news页面，作为服务的标识。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image11.png&#34;
style=&#34;width:5.76806in;height:0.47153in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如图3.2.6 创建服务测试页面&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;验证Ingress&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将上一步创建的测试服务注册到Ingress中，并请求Ingress
Service所对应的域名，验证当前服务是否注册成功，如图3.2.7所示，整个测试流程是成功的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image12.png&#34;
style=&#34;width:5.76806in;height:3.17083in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如图3.2.7 测试Ingress&lt;/p&gt;
&lt;p&gt;至此，准备环境已经完成构建，为了不影响后续的漏洞复现，这里需要将刚刚注册的测试Ingress资源删除。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;漏洞复现&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;41-构建配置&#34;&gt;4.1 构建配置&lt;/h2&gt;
&lt;p&gt;结合多个更早的CVE的修复逻辑，如图4.1.1.所示的“alias”等静态注入手法已经无法成功，最终笔者决定使用lua语言进行动态注入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image13.png&#34;
style=&#34;width:5.76806in;height:1.87917in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4.1.1注入“alias”配置文件&lt;/p&gt;
&lt;p&gt;如图4.1.2所示，构建一个使用
“nginx.ingress.kubernetes.io/permanent-redirect”进行注入的配置文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image14.png&#34;
style=&#34;width:5.76806in;height:2.95694in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4.1.2 利用配置文件&lt;/p&gt;
&lt;h2 id=&#34;42-执行注入&#34;&gt;4.2 执行注入&lt;/h2&gt;
&lt;p&gt;执行命令“kubectl apply -f
b-shell.yaml”，创建ingress资源并注入反弹代码，接下来我们查看NGINX
Controller的配置文件 ，如图4.2.1所示，在Nginx
Config文件中已经成功实现注入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image15.png&#34;
style=&#34;width:5.76806in;height:2.09236in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4.2.1 注入效果&lt;/p&gt;
&lt;h2 id=&#34;43-触发利用&#34;&gt;4.3 触发利用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在攻击端执行端口监听命令：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;nc -lvvp 2333&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求对应的连接触发攻击：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;curl &lt;a href=&#34;http://zhangxiaoyong.cn/xshell&#34;&gt;http://zhangxiaoyong.cn/xshell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;请求对应的链接后，如图4.3.1所示，监听端已经接管了NGINX Controller
容器的shell。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image16.png&#34;
style=&#34;width:5.76806in;height:2.64375in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4.3.1 接管NGINX Controller 容器shell成功&lt;/p&gt;
&lt;p&gt;在获取NGINX Controller
容器的权限后，可能会导致任意资源被攻击者窃取或篡改，破坏性非常高，限于篇幅此处笔者就不再进行分析了。&lt;/p&gt;
&lt;h2 id=&#34;44-漏洞修复&#34;&gt;4.4 漏洞修复&lt;/h2&gt;
&lt;p&gt;该漏洞官方给出的缓解建议是，升级NGINX
Controller到不低于1.9.0版本，并开启“enable-annotation-validation”。enable-annotation-validation是1.9.0引入的参数配饰，如图4.4.1所示，当参数配置为“true”时将会对Annotation的参数和值进行前置校验，反之则不会。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image17.png&#34;
style=&#34;width:5.76806in;height:2.33958in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4.4.1 enable-annotation-validation参数校验判断&lt;/p&gt;
&lt;p&gt;如图4.4.2所示，笔者升级NGINX
Controller的版本到1.9.4，并开启“enable-annotation-validation”后，执行注入失败。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image18.png&#34;
style=&#34;width:5.76806in;height:0.28403in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如图4.4.2 注入失败&lt;/p&gt;
&lt;p&gt;这里需要注意的是，enable-annotation-validation的官方配置是没有开启验证的[7]。笔者猜测是因为1.9.0后的版本前置了注释校验，并采用了更加严格的白名单机制。如果准入
Webhook 未完全覆盖正常的注释规则可能会影响业务[8]，所以官方需要在磨合几个版本后再默认开启。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文通过对CVE-2023-5044的介绍和分析，简单复现了利用步骤，期望通过这种形式让读者朋友对云原生场景下的内生安全有一定的认识，理解云原生安全体系建设的必要性和急迫性，共建更安全的云原生环境。&lt;/p&gt;
&lt;p&gt;参考文献&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&#34;https://www.nginx.com/resources/glossary/kubernetes-ingress-controller/&#34;&gt;https://www.nginx.com/resources/glossary/kubernetes-ingress-controller/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/issues/10572&#34;&gt;https://github.com/kubernetes/ingress-nginx/issues/10572&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&#34;https://docs.nginx.com/nginx-ingress-controller/overview/design/&#34;&gt;https://docs.nginx.com/nginx-ingress-controller/overview/design/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md&#34;&gt;https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/cloud/deploy.&#34;&gt;https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/cloud/deploy.&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/cloud/deploy.yaml&#34;&gt;yaml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6] &lt;a href=&#34;https://github.com/kubernetes-sigs/kind/issues/1650&#34;&gt;https://github.com/kubernetes-sigs/kind/issues/1650&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/cli-arguments.md?plain=1#L18&#34;&gt;https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/cli-arguments.md?plain=1#L18&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[8] &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/issues/10451&#34;&gt;https://github.com/kubernetes/ingress-nginx/issues/10451&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Tetragon – 盯向内核的眼睛</title>
                <link>https://cloud-Xolt.github.io/posts/ebpf-zerotrust/</link>
                <guid isPermaLink="true">https://cloud-Xolt.github.io/posts/ebpf-zerotrust/</guid>
                <pubDate>Thu, 07 Dec 2023 20:36:17 &#43;0800</pubDate>
                
                    <author>wo2g9cai@gmail.com (JOON)</author>
                
                
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;专题 安全开源工具 标签 eBPF检测、eBPF防御、eBPF安全&lt;/br&gt;
首发于&lt;a href=&#34;https://mp.weixin.qq.com/s/0IXlHu0LdQi1ttlcfSz1fg&#34;&gt;创新研究院官方博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;eBPF的出现使得Linux内核级别的网络过滤和事件介入不再是难题。如云原生场景下集群东西向流量的转发这一难题将得到轻快而优雅的解决，同样，今天笔者为大家带来的开源组件Tetragon便是基于eBPF技术的一种运行时安全执行和可观察性工具，本文期望通过对开源工具Tetragon的分享，为eBPF技术在云原生场景下的安全检测和防御提供一些思路。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简介&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.1  什么是eBPF？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;eBPF（extended Berkeley Packet
Filters）起源于BPF， 是一套通用执行引擎，提供了直通Linux内核的可编程通用能力。自Linux内核3.18版本后BPF扩展了
Berkeley
数据包过滤器等一系列特性，此后版本被称为eBPF，而之前的版本则被区分为cBPF。如图1
所示，由于新特性的加持，eBPF的架构设计得到更新，eBPF也注定在更多场景中发挥更大的价值，同时也由于eBPF比cBPF执行得更快等原因，cBPF在新的内核中也基本被废弃&lt;sup&gt;[&lt;/sup&gt;[1]&lt;sup&gt;]&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image1.png&#34;
style=&#34;width:5.00208in;height:2.89583in&#34; alt=&#34;bpf-basic-arch&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1 eBPF架构图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.2  eBPF有哪些应用场景？&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于eBPF具备从用户态到内核级史无前例的深度覆盖能力，不难想象，其应用领域也将是颠覆性的。关于这方面，官方也大致给出了如图2所示的4类应用场景&lt;sup&gt;[&lt;/sup&gt;[2]&lt;sup&gt;]&lt;/sup&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image2.png&#34;
style=&#34;width:4.69577in;height:5.351in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2 eBPF应用场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.2.1  安全防护&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如利用系统调用过滤并且结合网络过滤阻断恶意的调用动作或者丢弃恶意和非预期的流量，这个正好是检测或防护类产品的本质操作，这些操作直接作用于原对象，无需多余备份，其处理效率是传统手段很难达到的。正因为如此，绿盟科技创新研究院孵化的创新方案（云原生API网关）在做网络优化技术实施时也包含这一技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.2.2  调用追踪&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过创建内核探测或用户探测可以在内核或用户应用程序的几乎任何位置附加
eBPF
程序，结合整体的信息，用户程序到内核级别的上下文追踪将不是那么困难。&lt;/p&gt;
&lt;p&gt;当然，笔者认为要想做到一个通用的追踪模型还有一段路程去走，例如Containiq的联合创始人兼首席技术官Matt
Lenhard在一篇分布式追踪的文章里也描述到他们基于元数据关联进行追踪时，尽管在整个&lt;a href=&#34;https://www.containiq.com/post/kubernetes-cluster&#34;&gt;Kubernetes
集群&lt;/a&gt;中的调用追踪关联性很好，但lambda 函数调用相关性追踪在不改动请求头的情况下很难关联等问题&lt;sup&gt;[&lt;/sup&gt;[3]&lt;sup&gt;]&lt;/sup&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.2.3  网络编排&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优化网络过滤器的内部 BPF
指令集处理是eBPF的最初设计目标，由此可见eBPF在网络技术中的亮眼地位。Hook在网络驱动特定位置，优化最佳路径，加上先天无需包复制即可进行数据包过滤，这对网络编排具有得天独厚的优势。此领域不得不提的是Isovalent公司一手打造出的开源项目-Cilium ，将
eBPF技术融入 Kubernetes，成为云原生的革命性技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.2.4 数据监控&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;正如官方介绍，基于eBPF的数据监控，不依赖于系统应用的数据，其直指内核，这意味着更加透明和实时的数据审计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;为什么要聊Tetragon ？&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;第一，Tetragon是一款基于
eBPF技术的运行时安全实施和可观察性开源工具。多年来一直是 Isovalent
Cilium
Enterprise的一部分，2022年5月 Tetragon决定将其开源。了解到以上开源背景，相信不少朋友也会和笔者一样对其多关注一点。&lt;/p&gt;
&lt;p&gt;第二，Tetragon 仅做到了可视化和动作执行，留下更多深思的空间。这相当于是“削了皮的土豆”，
从土豆种植到土豆收获以及清洗削皮有完整的指导，对于接下来是炒土豆丝还是土豆片，亦或是雕花等等完全交给大家去发掘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt; Tetragon部署&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;理论上Tetragon 可以部署到任何内核支持&lt;a href=&#34;https://github.com/cilium/tetragon#btf-requirement&#34;&gt;BTF&lt;/a&gt;的系统内，这里包括虚拟机、容器或K8s集群等方式部署。如图3所示，在K8s环境中，Tetragon以DaemonSet的方式部署在集群中的每个节点上。通过配置文件看到Tetragon目前是以特权容器方式运行，笔者以为特权运行会增加整个环境的不安全风险，是否有其他更小权限的方案（如SYS_BPF_ADMIN等）值得去实践和思考。除特殊说明外，本文稍后涉及部署位置的讨论均默认在K8s集群内进行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image3.png&#34;
style=&#34;width:5.36864in;height:0.7097in&#34; /&gt;&lt;img src=&#34;./images/media/image4.png&#34;
style=&#34;width:4.58333in;height:3.66667in&#34;
alt=&#34;Tetragon Overview Diagram&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3 K8s环境中Tetragon部署方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt; Tetragon功能特性&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;相对于传统技术，Tetragon基于eBPF提供了如文件、套接字、二进制名称、命名空间/函数等丰富的过滤器，直接在内核中应用过滤器，不必花销繁重的上下文切换和唤醒等资源。值得关注的是开源工具本身并没有内置跟踪哪些函数和应用哪些过滤器，在目录中仅提供了部分的场景示例，这为后期的功能扩展和自定义跟踪提供了较大的灵活性。除此之外Tetragon的两个主打功能（可视化和实时执行）也是值得继续发掘和延伸的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;4.1 可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基于eBPF技术Tetragon
很容易对内核子系统进行观测，包括文件系统访问、网络数据访问，以及系统调用层的事件。
如图4所示&lt;sup&gt;[&lt;/sup&gt;[4]&lt;sup&gt;]&lt;/sup&gt;，
Tetragon可以做到对集群感知，也就是说针对集群内的活动上下文事件将体现集群特性，例如命名空间和
pod。
看到此处，笔者不禁联想到此技术在集群安全取证产品上也会有无限的发挥空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image5.png&#34;
style=&#34;width:4.73758in;height:1.00444in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4 K8s环境中Tetragon 的监控数据&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于可视化来说，如图5所示，Tetragon 中通过网络过滤和运行时过滤的联合，对于特定的单体对象（如文件、函数等）很容易展示出其上下文的关联。Isovalent官方博客中描述其是“智能的”，不可否认，对于单个数据链可视化的深度来说，上下文的信息是比较丰富的，但离智能似乎还有一段路要走。笔者认为，如何将整个系统中无数的调用链进行关联，以形成“血管网络图谱”、如何对调用链路的分类乃至异常特征的自动标注，以达到异常调用链路联想的效果，这是走向“智能”的一条道路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image6.png&#34;
style=&#34;width:5.125in;height:2.47361in&#34;
alt=&#34;https://isovalent.com/static/df24e84dbe30c5975d46031fcf191d5b/combined_network_runtime_visibility.png&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图5 某横向移动可视化&lt;/p&gt;
&lt;p&gt;Tetragon借助eBPF技术可以做到对网络、运行时、敏感文件以及云原生生态链组件信息等进行检测，这充分体现了eBPF的强大之处，但正因为如此，应用eBPF技术到攻击面将是更加可怕的，正如美团信息安全团队所表达的忧虑&lt;sup&gt;[&lt;/sup&gt;[5]&lt;sup&gt;]&lt;/sup&gt;，Tetragon也是使用eBPF的相关接口，如果环境已经有恶意程序对eBPF的结果进行伪装，那么以上所有的可视化上下文将无法发现问题。借用其罗列的取证思路，提前结合系统层和用户态的信息进行比对将是一种最直接的解决方法。这里笔者还想到的是：在eBPF用户空间程序层利用第三方可信组件（注意这里不使eBPF本身变复杂）提供签名验证（如结合类似Sigstore +
In-toto保证供应链组件的调用来源可信+调用内容可信），以此保证加载程序的合法性来避免此类的攻击是否是一种较好的解决思路呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;4.2  实时执行&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如图6所示&lt;sup&gt;[&lt;/sup&gt;[6]&lt;sup&gt;]&lt;/sup&gt;，Tetragon支持来自多层级的安全策略机制，如通过用户层、CRD和JSON
API 等第三方应用层或
OPA等系统层注入安全策略，当然也可以在内核层预制规则。当策略被触发时，实时对下一步操作做出响应，如拦截等。而这些响应动作直接在内核中对事件做出反应，而不是将事件发送到用户空间代理，这极大地缩短了上下游的响应链。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image7.png&#34;
style=&#34;width:4.90972in;height:2.82292in&#34;
alt=&#34;https://isovalent.com/static/a280a2a23afab7fc250b3556edbc5716/enforcement2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图6 Tetragon策略架构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tetragon提供基于多层的策略抽象代理，面向用户态的操作者可以轻松地定义规则配置，达到从上至下的实时管控效果。需要注意的是，这也面临同样的问题，如果环境已经被恶意利用eBPF技术攻击，
那Tetragon的实时执行结果将可能是被篡改的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;由于笔者本身对eBPF攻击和防御技术的认识有限，本文仅依托开源组件Tetragon对eBPF技术做一些浅简的思考，如有不妥之处，观点仅代表笔者本人，同时也欢迎有兴趣的同学后台联系我们一起交流学习，更多深层次的eBPF技术剖析后期将会由此方向的研究同学进行分享。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;p&gt;[1]  狄卫华.深入浅出eBPF&lt;/p&gt;
&lt;p&gt;[2]  eBPF.What is eBPF&lt;/p&gt;
&lt;p&gt;[3]  Matt Lenhard.Automated Distributed Tracing Using
eBPF (Part 1)&lt;/p&gt;
&lt;p&gt;[4]  &lt;a href=&#34;https://github.com/cilium/tetragon&#34;&gt;https://github.com/cilium/tetragon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5]  美团信息安全团队.Linux中基于eBPF的恶意利用与检测机制&lt;/p&gt;
&lt;p&gt;[6]  Isovalent.Tetragon – eBPF-based Security
Observability &amp;amp; Runtime Enforcement&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>浅谈云原生BAS</title>
                <link>https://cloud-Xolt.github.io/posts/cnbas/</link>
                <guid isPermaLink="true">https://cloud-Xolt.github.io/posts/cnbas/</guid>
                <pubDate>Thu, 07 Dec 2023 20:32:35 &#43;0800</pubDate>
                
                    <author>wo2g9cai@gmail.com (JOON)</author>
                
                
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;专题 云原生 标签 云原生安全&lt;/br&gt;
首发于&lt;a href=&#34;https://mp.weixin.qq.com/s/vp14doFQzEHn1DJA05oSLQ&#34;&gt;创新研究院官方博客&lt;/a&gt;
&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;业务上云已经成了趋势，上云即配置安全防护产品已然成了必要步骤，然而从来没有绝对的安全，如何早于攻击者发现云原生环境的风险以及检验云原生安全能力是否生效，这成了市场亟待解决的问题，今天我们为大家介绍的“云原生BAS”力图解决这一难题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简介&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;说到云原生BAS，我们必须要先了解什么是BAS，下面逐步来聊一聊：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.1  什么是BAS？&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Breach and Attack
Simulation（BAS）即入侵与攻击模拟，即通过对环境进行一致性、端到端、持续性、真实无害化的攻击模拟，以评估和验证环境的安全以及安全控制项的有效性，并且提供可视化的结果展示[1]。&lt;/p&gt;
&lt;p&gt;Gartner在2017年抛出了如何实际测试组织的整个安全性问题，随即引入了BAS技术[2]。从BAS出现到在大众视野到逐步产品化的今天，关于BAS的讨论从未停止，如“实际测试”限定而引入测试的真实性讨论：到底应该有多真实、哪些应该是被模拟的等等。在众多对此领域感兴趣或者相信BAS是解决该问题的有效方法的组织或个人的推动下，BAS的轮廓渐进明晰。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.2  什么是云原生BAS？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cloud Native Breach and Attack Simulation(CNBAS)
即云原生入侵与攻击模拟，顾名思义，这里是对测试环境镜像了限定，测试的对象是云原生环境。当然这里并不单单指集群环境。聊到这里，笔者认为云原生这个词我们有必要再看看，如图1所示，有利于构建、运行和充分利用云计算模型优势的技术/方法都是云原生相关。故CNBAS的测试应包含代码的安全开发、代码仓库、DevOps环境、镜像、镜像仓库等等一系列上下游环节和对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image1.png&#34;
style=&#34;width:3.62297in;height:2.31485in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1 云原生概念发展图&lt;/p&gt;
&lt;p&gt;经过前面的介绍，大家应该对CNBAS和传统BAS都有了些许了解，那么CNBAS存在的意义是什么？它是否能解决传统工具处理不了的问题？传统BAS能否替代CNBAS？带着诸多疑问，接下来我们继续探讨。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;为什么需要CNBAS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.1  市场需要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随着全球数字化转型浪潮的推进，政企业务纷纷上云，上云的市场需求，必然推动云基础设施的持续发展，如图2所示[3]，IDC2021年的报告显示，接受调查的云组织正在花费大量的费用去发展云基础设施。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image2.png&#34;
style=&#34;width:3.59784in;height:2.71116in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2 云基础设施花费&lt;/p&gt;
&lt;p&gt;这一数据也恰好和云原生市场应用的趋势相呼应，如图3所示，Datadog
2021年10月的报告数据显示在过去一年中，使用OpenShift的组织增加了28个百分点[4]。作为云原生容器编排管理平台的一个企业版本，这表明不少的企事业组织正在将更多的应用迁移到云原生环境中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image3.jpeg&#34;
style=&#34;width:3.62986in;height:2.15625in&#34;
alt=&#34;容器报告/2021-容器编排报告-FACT-9v2&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3 OpenShift市场使用趋势&lt;/p&gt;
&lt;p&gt;毋容置疑，云基础设施的完善和业务上云会带来诸多便利，但同时也使云上安全问题出现在大众视野里。如图4所示，2021年Ermetic 和IDC的报告显示，超过90%的云使用者在过去的一年半时间里发生过云数据泄露的事件[5]。当然这不仅局限于数据泄露，还有其他具有代表性的攻击事件:
如2018年RedLock披露的特斯拉K8S挖矿事件、2019年Palo Alto
Networks披露的Graboid蠕虫挖矿传播事件、2020年微软检测到大规模的K8S挖矿事件等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image4.png&#34;
style=&#34;width:3.23755in;height:2.55384in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4 云攻击调度&lt;/p&gt;
&lt;p&gt;云上业务被攻击后造成的损失是不可估量的，如图5所示[6]，轻则缴纳赎金，重则数据泄露、业务中断，给组织造成经济和名誉上不可挽回的损失。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image5.png&#34;
style=&#34;width:3.89421in;height:2.37938in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图5 云上业务和网站被攻击后的结果&lt;/p&gt;
&lt;p&gt;面对如此严重的后果，云上业务拥有者，也会部署对应的安全产品，但即使部署大量的安全防护产品也不能完全打消管理者的疑虑，如何确保云原生环境的安全性和安全能力的有效性，能够早于攻击者发现环境的漏洞风险，这成为了市场迫切需要解决的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image6.png&#34;
style=&#34;width:4.07879in;height:2.67189in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图6 组织合作中对安全问题的态度的统计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.2  传统的工具无法满足&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如何测试云原生环境的安全性？如何测试安全能力控制项是否生效？笔者首先想到的是渗透测试、红蓝演练、漏洞评估。如图7所示，传统方案面临着成本高昂、连续性差、耗时长、覆盖面窄，无法保证一致性和可靠性等其中的一项或几项问题，而CNBAS恰好可以解决这些问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image7.png&#34;
style=&#34;width:4.67469in;height:2.20114in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图7 云原生环境评估工具对比&lt;/p&gt;
&lt;p&gt;那么现有的传统BAS解决方案是否可以解决云原生场景下的这些问题呢？答案是否定的，虽然传统BAS具备上述所有特性，但传统BAS很少能够对云原生环境做到精细化和全面覆盖的攻击模拟。CNBAS专注于云原生场景下的攻击模拟，以集群安全为例，传统的BAS无论从外界资产进行发现和突破，还是部署各种形式的代理到集群内部，其攻击的方向和对象大多是粗略的（如以IP资产或者单独应用为维度的攻击），很少能够对内部的隔离控制项，或者微服务交互项、以及容器内部进行一致性的精细化攻击。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;CNBAS怎么做&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gartner在2017年的报告中对BAS做了相关的技术描述，即允许在组织环境中部署软件代理、虚拟机或通过其他形式持续并一致地对环境进行攻击模拟的工具[7]。那么在云原生场景下，BAS怎么设计更加合适，毫无疑问，有一个永远不会错的回答--云化的方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.1  攻击方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么是云化的方式？从Gartner对其的技术定义来看，向客户环境投放一个容器形式的代理无疑是最简单的实现方案，如图8所示，通过代理和Center进行交互达到对环境进行内部攻击模拟的目的。但笔者认为应该还有其他的答案，如无代理模式或许是云化场景下的一个友好的方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image8.png&#34;
style=&#34;width:3.75486in;height:1.72361in&#34;
alt=&#34;C:\Users\zhangxiaoyong\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\338254AF.tmp&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图8 容器代理模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.2  上下游的联动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者以为，CNBAS应该具备和上下游应用或者工具进行联动的能力，以做到精细化控制环境和验证控制项目有效性。考虑到云原生环境和安全产品的多样性，插件化的联动方式或许是一个不错的选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.3  用于攻击的武器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;探讨这个问题的前提是模拟的对象是攻击，当然这里并没有排斥对组织环境进行模拟，这需要按照场景去选择，这里暂时先探讨前者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.3.1 武器需要经过无害化的处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至少产生的结果在可控的范围内，比如说在容器内逃逸后做了一个反弹shell，那么可以暂时反弹到内部固定的容器内或者其他可控且无法被其他程序利用的方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.3.2 可以对武器进行原子化标记，便于根据场景或者机器学习对攻击链路进行编排。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依托红蓝对抗等真实的攻击经验编排武器攻击链基线，以基线为中心进行组合学习，针对新链路进行标注，训练学习，最终以原子武器结合环境信息智能编排。值得一说的是机器学习的引入也许可以将原子武器进行变异，这是一个值得期待的方向。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3..3.3  武器攻击的过程需要可追溯、可回放。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里考虑的是攻击的可信度，如是否真实攻击成功、是否真实无害等，做到过程可溯源和可回放可以很好地减少这方面的疑虑。回放不用过多探讨，至于如何做到可追溯，我想日志和审计等常见方法也是不错的选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3.4 部署方式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在笔者看来，支持SaaS化的部署方式是必要的，但考虑到国内和国外的云使用场景和份额，行业部署或者单点部署也不得不加以考虑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image9.png&#34;
style=&#34;width:4.23723in;height:2.07321in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图9 CNBAS部署示意图&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;CNBAS做什么&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里主要是想简单探讨功能模块的问题，这就涉及到要做成傻瓜照相机还是机械单反的问题。结合市场和用户视角来看，笔者倾向于前者，以下的主要功能也是以此为前提进行的探讨。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4.1  对云原生环境资产的管理&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;CNBAS允许从不同的阶段进行攻击模拟，故掌握被攻击资产的关键信息是有必要的（如特定的账号或者口令，便于跳过发现和爆破进行内部攻击）。同时依托录入的信息可以和对应的资产进行交互，获取一定的信息便于资产的监控。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;4.2  攻击任务&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以整个云原生环境为目标进行攻击任务的管理，任务具有一致，持续性、精确攻击范围、自动化等特性。&lt;/p&gt;
&lt;p&gt;实施攻击中，可以对攻击输出进行实时查看跟踪，攻击结束后可以查看历史攻击链的日志，可以选择攻击链路进行回放攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;4.3 报表&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以云原生环境为维度，统计完成攻击的任务，形成整体环境的报表，报表除了常规的漏洞统计、趋势、详情和可执行的修复建议外，笔者认为多维度展示整个环境的安全成熟度是一个不错的补充。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;4.4 上下游联动&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;攻击前的情报信息，以及攻击后的真实风险处置等等都可以联动上下游安全产品进行交互，如对于攻击成功后的风险，可以联动安全能力推送或者下发对应的策略消息，以此往复，形成端到端的闭环。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;4.5 态势&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;除已经提及的风险联动处置外，以整个云原生环境为维度进行统计，如对工具管理的环境进行风险汇聚形成分布和趋势等在笔者看来也是一个增色模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;以上是笔者对CNBAS大致的一些想法，由于视野有限，其中难免会有认知上的局限，故欢迎有兴趣的朋友在后台留言一起探讨，后期的文章将会带来更详细的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;参考文献&lt;/h1&gt;
&lt;p&gt;[1] Gartner.Threat Simulation – How real does it have to be?&lt;/p&gt;
&lt;p&gt;[2] Gartner.How to Actually Test Security&lt;/p&gt;
&lt;p&gt;[3] IDC.State of Cloud Security 2021&lt;/p&gt;
&lt;p&gt;[4] Datadog.10 Trends in Real-World Container Use | Datadog&lt;/p&gt;
&lt;p&gt;[5] Ermetic.State of Cloud Security 2021&lt;/p&gt;
&lt;p&gt;[6] CSA.Cloud and Web Security Challenges in 2022&lt;/p&gt;
&lt;p&gt;[7] Gartner.Hype Cycle for Threat-Facing Technologies 2017&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>基于零信任构建云原生安全底座</title>
                <link>https://cloud-Xolt.github.io/posts/rsac-zerotrust/</link>
                <guid isPermaLink="true">https://cloud-Xolt.github.io/posts/rsac-zerotrust/</guid>
                <pubDate>Wed, 06 Dec 2023 18:10:14 &#43;0800</pubDate>
                
                    <author>wo2g9cai@gmail.com (JOON)</author>
                
                
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;专题 2023RSAC创新沙盒 标签 0day 零信任 K8S&lt;/br&gt;
首发于&lt;a href=&#34;https://mp.weixin.qq.com/s/fkBQR5wAUqCrMCQOLxPmDQ&#34;&gt;创新研究院官方博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在2023年RSA大会上，来自SUSE NeuVector的高级安全工程师Tracy
Walker为我们分享了一种在K8S环境中阻止0Day攻击的透明(对业务和环境无影响)方法——零信任原则，并且使用开源工具NeuVector进行了演示。本文基于Tracy的零信任观点结合SUSE的整体方案，尝试挖掘出更多的安全新思路。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;背景介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tracy的分享主要是围绕零信任为何能防御0Day攻击展开，如图1所示，简单来说就是基于CVE等已知扫描检测手段无法发现未知攻击。零信任，默认拒绝所以动作，只有在允许的列表里才会被授权，已知、未知尽在掌握。笔者在这里想要聊一聊Tracy使用的开源工具——NeuVector。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image1.png&#34;
style=&#34;width:5.76806in;height:3.21042in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1 传统控制和零信任控制对比&lt;/p&gt;
&lt;p&gt;SUSE相信大家都很熟悉了，是一家全球性的开源软件公司，提供企业级的Linux操作系统和相关的解决方案。而Tracy分享的理念的基础支撑其实是来自NeuVector。接下来请和笔者一起来扒一扒NeuVector的历史。&lt;/p&gt;
&lt;p&gt;NeuVector由黄飞（Fei Huang）和段磊（Gary
Duan）于2015年在美国加利福尼亚州联合创立。创立之初公司专注于容器安全，具体就是网络监测和容器防火墙。公司创立后发展迅速，于21年被SUSE收购。此举极大地增强了Rancher的安全合规板块，从此NeuVector也正式成为SUSE的一部分，大概也是由此开始
，NeuVector贴上零信任标签。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是零信任&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传统的网络安全模型通常采用边界防御，即在内部网络和外部网络之间建立防火墙来保护内部资源。然而，随着网络边界的模糊化和攻击技术的不断演进，边界防御已经不足以提供足够的安全性。如图2所示[1]，黄飞在一次网络研讨会中也表明，随着业务云化的不断推进，安全模型也逐步向零信任演进。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image2.png&#34;
style=&#34;width:5.76806in;height:3.05486in&#34;
alt=&#34;C:\Users\zhangxiaoyong\Documents\WXWork\1688851816357974\Cache\Image\2023-05\WXWorkCapture_16842897606944.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2 安全模型的演进&lt;/p&gt;
&lt;p&gt;正如Tracy在一次网络研讨会中所说的那样[2]，零信任（Zero
Trust）的核心原则是&amp;quot;永远不信任，始终验证&amp;quot;。它基于一种假设，即无论是内部用户、外部用户还是设备，都不能被默认信任。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image3.png&#34;
style=&#34;width:5.76806in;height:3.21597in&#34;
alt=&#34;C:\Users\zhangxiaoyong\Documents\WXWork\1688851816357974\Cache\Image\2023-05\WXWorkCapture_16843125775399.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3 Tracy Walker关于零信任的解释&lt;/p&gt;
&lt;p&gt;零信任（Zero
Trust）是一种安全模型，不是一个具体的产品或技术。它的核心理念是不信任任何设备、用户或应用程序，并将访问控制和安全策略放在应用程序层面。零信任安全模型认为，每个用户和设备都可能成为攻击者，因此必须对它们进行身份验证、授权和访问控制，以保护敏感数据和应用程序。这种基于认证和授权的精细访问控制可以减少攻击者的潜在影响范围，并提供更高的安全性。&lt;/p&gt;
&lt;p&gt;因此，零信任安全模型强调了持续的身份验证、访问控制和监控，以确保只有经过验证和授权的用户和设备能够获得访问权限。它不仅仅关注网络边界，而是将安全性扩展到应用程序、数据和用户层面，从而提供更全面的安全保护。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NeuVector和零信任的关系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;NeuVector的产品提供了基于容器的安全解决方案，帮助用户保护他们的容器环境。它包括实时威胁检测、入侵检测和预防、运行时安全策略、自动响应等功能，可以帮助用户识别和防止各种攻击，包括内部和外部攻击、未知攻击和高级威胁等。&lt;/p&gt;
&lt;p&gt;NeuVector的产品可以作为实现零信任安全模型的一部分，提供对容器环境的实时安全保护和威胁检测。但是，实现零信任安全模型还需要其他技术的支持，如多因素身份验证、数据加密等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建零信任云原生安全底座的方案&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;51-suse的安全底座组件&#34;&gt;5.1 SUSE的安全底座组件&lt;/h2&gt;
&lt;p&gt;NeuVector加入SUSE大家庭后，结合其他产品如SUSE
Linux、Harvester和Longhorn等基本可构成一个可信安全环境，笔者将其称为零信任云原生安全底座(简称安全底座)。如图4所示，笔者在NeuVector网络研讨会中也发现他们关于此的介绍，接下来我们来简单了解下该方案的组成以及这些产品在安全底座中的作用：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image4.png&#34;
style=&#34;width:5.76806in;height:3.00903in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4 SUSE零信任环境结构&lt;/p&gt;
&lt;p&gt;NeuVector：是一个容器防火墙解决方案，用于保护容器化应用程序的安全。它通过深度数据包检测（DPI）和容器运行时保护，提供容器级别的入侵检测和防御，监控和阻止恶意流量和攻击。NeuVector帮助确保容器环境的安全性，并提供对容器网络流量的可见性和控制。&lt;/p&gt;
&lt;p&gt;Rancher：是一个开源的容器管理平台，提供了集群管理、应用程序编排、监控和日志、身份认证和访问控制等功能，帮助用户简单且快速的部署一个可行的安全底座。&lt;/p&gt;
&lt;p&gt;SUSE Linux，Harvester：SUSE
Linux作为一个企业级Linux操作系统，提供了可靠、安全和可扩展的基础设施，用于构建和部署应用程序。它提供了强大的安全功能和工具，包括访问控制、身份验证、文件加密等，以帮助建立安全的基础架构，为环境提供了
一个减少攻击面的系统镜像；Harvester是一个基于Kubernetes的开源虚拟化平台，为容器化应用程序提供了高性能和简化的虚拟机管理解决方案。它利用Kubernetes的自动化和可伸缩性，提供了可靠的虚拟化基础设施，帮助构建安全的应用环境。&lt;/p&gt;
&lt;p&gt;Longhorn：Longhorn是一个开源的分布式块存储系统，为容器化环境提供持久化存储解决方案。它通过提供数据加密、快照和恢复等功能，保护存储在容器中的数据的安全性和可靠性。&lt;/p&gt;
&lt;p&gt;将这些组件组合在一起，可以构建一个强大的零信任安全底座。通过NeuVector提供的容器防火墙功能，SUSE
Linux提供的安全基础设施，Harvester提供的虚拟化管理和Longhorn提供的数据存储，可以实现对容器化环境的全面安全保护和管理。这种组合可以帮助用户快速建立一个基于零信任原则的安全底座，确保应用程序和数据的安全性和保密性。&lt;/p&gt;
&lt;h2 id=&#34;52-suse的零信任实践&#34;&gt;5.2 SUSE的零信任实践&lt;/h2&gt;
&lt;p&gt;如图5所示，通过以上组件的结合，NeuVector针对零信任在云原生环境下的实践控制项做了梳理[3]。接下来笔者将以最小化攻击面为例做一些简要的说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image5.png&#34;
style=&#34;width:5.76806in;height:3.12708in&#34;
alt=&#34;C:\Users\zhangxiaoyong\Documents\WXWork\1688851816357974\Cache\Image\2023-05\WXWorkCapture_16842904244193.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图5 云原生应用的实用零信任控制&lt;/p&gt;
&lt;h3 id=&#34;521-生命周期中的漏洞风险状态管理&#34;&gt;5.2.1 生命周期中的漏洞、风险、状态管理&lt;/h3&gt;
&lt;p&gt;笔者理解，如图6所示[4]，这需要在应用程序的整个生命周期中，对漏洞和风险进行管理，确保及时修补和更新，以减少潜在的攻击面。笔者将从以下几个方面简要分析：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image6.png&#34;
style=&#34;width:5.76806in;height:2.85764in&#34;
alt=&#34;https://neuvector.com/wp-content/uploads/2020/08/NeuVectorPipeline.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图6 NeuVector全生命周期安全图&lt;/p&gt;
&lt;p&gt;操作系统和虚拟化：这其实由SUSE的SUSE Linux，Harvester所提供。&lt;/p&gt;
&lt;p&gt;代码层：由于官方有关于Sonatype
Nexus的集成描述[5]，笔者猜测，NeuVector结合了Sonatype
Nexus能够做到CI/CD阶段检测项目中使用的组件是否存在已知的安全漏洞供应链扫描并添加准入规则来保障项目组件的安全性。&lt;/p&gt;
&lt;p&gt;镜像层面：NeuVector的自动响应规则结合JFrog
Xray镜像扫描能力，NeuVector允许根据JFrog
Xray的扫描结果配置自动响应规则。根据镜像中发现的安全漏洞或合规性问题，可以定义特定的规则和操作来保护容器环境。如图7所示，可以设置规则，如果镜像中存在高危漏洞，则自动拒绝该镜像的引用,
将被扫描过的镜像仓库定义为合法仓库，仅允许合法仓库被使用等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image7.png&#34;
style=&#34;width:5.76806in;height:3.22014in&#34;
alt=&#34;C:\Users\zhangxiaoyong\Documents\WXWork\1688851816357974\Cache\Image\2023-05\WXWorkCapture_1684294147178.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图7 镜像规格准入控制&lt;/p&gt;
&lt;p&gt;运行时：将进程和文件系统监控与第7层网络检查结合使用，对网络、数据包、零日攻击和应用攻击（如
DDoS 和
DNS）的唯一实时识别和阻止，可以在不中断正常容器会话的情况下阻止未经授权的容器活动或来自容器的连接，其实也就是透明的意思，对正常环境没有影响。&lt;/p&gt;
&lt;h3 id=&#34;522-默认拒绝&#34;&gt;5.2.2 默认拒绝&lt;/h3&gt;
&lt;p&gt;所有实体都被默认视为不受信任，需要经过验证和授权才能访问资源和服务，这里其实就是容器防火墙的默认拒绝策略。&lt;/p&gt;
&lt;h3 id=&#34;523强制执行最低权限访问&#34;&gt;5.2.3强制执行最低权限访问&lt;/h3&gt;
&lt;p&gt;采取最小权限原则，只授予实体所需的最低权限，以减少潜在的风险和攻击面。这里包含三个方面的内容，数据的采集和规则的生成以及应用。&lt;/p&gt;
&lt;p&gt;NeuVector表明其使用的是第7层网络检测技术而不是eBPF和Istio技术去做流量采集也不是。没有使用Istio的原因是，Istio无法对已经加密的流量做分析（如HTTPS协议的请求），这很容易获取不到明文或者给攻击者留下伪装的途径，而&lt;strong&gt;I&lt;/strong&gt;stio
Egress
Gateway则需要额外添加网络策略确保所有出口流量都流经网关，这将增加配置的复杂性。关于为何没有使用eBPF，笔者没有在官方资料中找到明确的原因，只在网络研讨会议中看到他们认为在网络侧做流量分析能够获取的更加全面，笔者猜想还有另外一个原因是eBPF对系统版本是有强制要求的，这意味着旧版本的系统环境将无法使用这一技术，这将非常不友好。基于第7层深度数据包检测的技术其实也就是DPI（Deep
Packet
Inspection）可以识别多种应用层协议，关于加密协议的流量识别，在官方介绍里简要说明是通过对允许的NDS的跟踪，联系上下文信息间接解析流量内容[6]。由此基于DPI技术NeuVector可以做到如图8所示的包含Istio等所有流量的解析和追踪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image8.png&#34;
style=&#34;width:5.76806in;height:3.21944in&#34;
alt=&#34;C:\Users\zhangxiaoyong\Documents\WXWork\1688851816357974\Cache\Image\2023-05\WXWorkCapture_16843137455972.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图8 NeuVector对Istio流量的可视化&lt;/p&gt;
&lt;p&gt;通过对详细流量的解析，NeuVector很容易获取环境的行为原始信息，原始信息匹配如图9所示的各类规则可以生成对应类型的安全事件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image9.png&#34;
style=&#34;width:5.76806in;height:3.225in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图9 策略规格&lt;/p&gt;
&lt;p&gt;原始信息结合开放策略代理（OPA）生成CRD策略（这就是NeuVector宣称的安全即代码），并应用到环境中使策略生效[7]。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在关注这次RSA议题之前，笔者也和相关同事讨论过零信任云安全底座的事情。当时笔者倾向于在内核级别去做云场景下的零信任，笔者期望在内核层之上不做过多关注，只从最底层处去做限制。对Tracy的这次分享的背后挖掘也拓宽了笔者的视野。针对NeuVector的零信任云原生安全底座解决方案，笔者有以下两点疑虑：&lt;/p&gt;
&lt;p&gt;第一，当企业决定将
NeuVector真正运用在实际环境中时候，如何判断哪些策略该被允许将是一个让人头疼的问题。尽管他们宣称环境拥有一定的一致性，因此可以导出规则到其他环境，但针对云场景下数以万计的微服务，谁来做合法性的判断，谁又能做这将是个未知数。虽然Tracy宣称他们没使用机器学习技术，但笔者感觉使用机器学习自动判断服务的哪些动作是合法的，从而自动给出策略建议也许是一个不错的方案。&lt;/p&gt;
&lt;p&gt;第二，假如攻击者已经早于NeuVector对环境做了控制，例如攻击者已经掌握集群的部分CRD资源管理权限，又或者攻击者做到了内核级别的劫持，那NeuVector基于CRD发出的所有控制策略将形同虚设。基于此，笔者还是保留基于内核层做控制的建议。&lt;/p&gt;
&lt;p&gt;由于篇幅有限，非常遗憾没有针对NeuVector的底层原理进行说明，如有兴趣的朋友可以关注官方渠道进行交流。&lt;/p&gt;
&lt;p&gt;参考文献&lt;/p&gt;
&lt;p&gt;[1] SUSE.Zero-Trust Security for Kubernetes and Container Workloads&lt;/p&gt;
&lt;p&gt;[2] SUSE.Zero Effort Zero Trust for Blocking Zero Days in Kubernetes&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&#34;https://neuvector.com/about/events/&#34;&gt;https://neuvector.com/about/events/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&#34;https://neuvector.com/wp-content/uploads/2020/08/NeuVectorPipeline.png&#34;&gt;https://neuvector.com/wp-content/uploads/2020/08/NeuVectorPipeline.png&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&#34;https://neuvector.com/products/integrations/&#34;&gt;https://neuvector.com/products/integrations/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6] Neuvector. How to Enforce Egress Container Security Policies in
Kubernetes, OpenShift, and Istio&lt;/p&gt;
&lt;p&gt;[7] Neuvector. Use Cloud-Native Tools OPA and CRD to Protect
Applications from Pipeline to Production&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>RSA创新沙盒盘点｜Endor Labs—让开源软件使用更安全</title>
                <link>https://cloud-Xolt.github.io/posts/rsac-endorlabs/</link>
                <guid isPermaLink="true">https://cloud-Xolt.github.io/posts/rsac-endorlabs/</guid>
                <pubDate>Wed, 06 Dec 2023 18:04:40 &#43;0800</pubDate>
                
                    <author>wo2g9cai@gmail.com (JOON)</author>
                
                
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;专题 2023RSAC创新沙盒 标签 供应链软件安全 开源软件安全&lt;/br&gt;
首发于&lt;a href=&#34;https://mp.weixin.qq.com/s/UuHeoyscp_q7sPymLddnuQ&#34;&gt;创新研究院官方博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;公司介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Endor Labs 于2021年注册，是一家专注于供应链安全的初创公司。Varun Badhwar
和 Dimitri
Stiliadis是公司的联合创始人，两人此前均有相似的成功创业经历。在创立Endor
Labs之前Varun
Badhwar先后创立了CipherCloud和RedLock公司，其中RedLock后来被Palo Alto
Networks收购。Dimitri Stiliadis在2015年创立了Aporeto公司，2020年也被Palo
Alto Networks收购。两人进入Palo
Alto后遇到了新的安全挑战(工程人员和开发人员被大量的开源软件依赖告警所淹没)，两人随即创立了Endor
Labs。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image1.jpeg&#34;
style=&#34;width:2.15765in;height:2.15765in&#34; alt=&#34;Varun Badhwar&#34; /&gt;&lt;img src=&#34;./images/media/image2.jpeg&#34;
style=&#34;width:2.15765in;height:2.15765in&#34; alt=&#34;Dimitri Stiliadis&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1 公司创始人（左为Varun Badhwar，右为Dimitri Stiliadis）&lt;/p&gt;
&lt;p&gt;其官网资料显示，Endor Labs在2022年10月左右获得了Lightspeed Venture
Partners、Dell Technology Capital和Sierra
Ventures以及几位行业知名人士共25万美元的种子投资。截止2022年11月，Endor
Labs已经拥有30多名员工，其中大多数技术人员分布于美国和印度两地。Endor
Labs于2022年发布了依赖关系生命周期管理平台，该平台通过安全地评估、维护和更新依赖关系来帮助开发和安全团队最大限度地提高软件重用率，降低开源软件安全风险，确保开发人员使用安全的开源软件（OSS）加速开发周期。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;背景介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;云计算时代最底层需求逻辑是什么？答案是“快”！于是出现了“敏捷”、“智能”、“弹性”等待一系列相应技术或者方案。作为服务链路前端的生产者-开发人员，引用开源包来加速开发的确不失为一种有效的应对方法。&lt;/p&gt;
&lt;p&gt;Endor Labs营销副总裁Ron
Harnik在一篇文章中宣称“现代应用程序中百分之八十的代码不是开发人员编写的代码，而是开源包的代码”[1]。这一描述并不是没有根据，如图2所示[2]，Forrester
2021报告显示过去几年内产品代码中已经包含了大量的开源代码，而且占比也逐年上升，到2019年已达到70%，因此80%的占比预估也是相对合理的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image3.png&#34;
style=&#34;width:4.54363in;height:2.37028in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2 开源代码占比统计&lt;/p&gt;
&lt;p&gt;随着包含大量开源软件的应用被部署并暴露到网络中，如SolarWinds和Log4j等由上游供应链软件引入安全风险导致的攻击事件也频频出现在大众的视野里。如图3所示[3]，近10年来开源软件供应链攻击事件大体呈上升趋势。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image4.png&#34;
style=&#34;width:4.77765in;height:2.45152in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3 开源软件供应链近十年的攻击事件趋势&lt;/p&gt;
&lt;p&gt;综合来看，开源软件在整体产品中使用占比越来越高，开源软件对整体产品安全的影响也会越来越高。正如Endor
Labs创始人前期所遇到的问题一样，SCA工具生成了海量的与 OSS
依赖关系相关的告警，然而除了开发人员手动进行代码审查之外，没有更好的方法可以验证这些报告的漏洞是否真实。同时随着国际贸易摩擦加重，全球化或逐步转向区域化保护，2022年初美国召开的开源软件安全会议也将开源软件提升至国家战略层面[4]。如何有效治理开源软件的引入的安全问题成了所有组织最为头痛的问题之一。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;产品介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4.1 关于部署形态和执行效率&lt;/p&gt;
&lt;p&gt;Endor
Labs官网宣称其是一个基于云的服务，可以在几分钟内部署任何的客户环境中。产品的价值可在部署后数小时内得到证明。因此笔者猜测该产品可能是支持容器化部署，并且单产品的全量开源软件评估可能在10小时内，不会太快。&lt;/p&gt;
&lt;p&gt;4.2 准确的软件材料清单（SBOM）&lt;/p&gt;
&lt;p&gt;作为安全合规必不可少的物料之一，SBOM可以帮助企业全面了解其软件供应链中使用的开源和第三方组件，从而更好地管理与保护软件供应链的安全性。&lt;/p&gt;
&lt;p&gt;Endor
Labs支持通过静态代码分析和依赖关系分析结合生成软件供应链数据。如图4显示[5]，其提供一个集中化SBOM图形管理中心，支持创建、分析、存储和导出SBOM。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image5.png&#34;
style=&#34;width:4.84416in;height:2.72476in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/63433565eb3b66e43d07b24d_Project%20Details%20-%20Packages%20Tab.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4 SBOM导出&lt;/p&gt;
&lt;p&gt;使用Endor Labs 生成 SBOM具有以下几个优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自动化生成：Endor Labs 采用自动化的方式生成
SBOM，能够大幅提高生成效率，降低人为失误风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整性保障：Endor Labs 通过扫描整个软件供应链中的组件信息，确保 SBOM
的完整性和准确性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实时更新：Endor Labs 的 SBOM 会随着软件供应链的变化而实时更新，确保
SBOM 始终保持最新状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于管理：Endor Labs 生成的 SBOM
采用标准格式，可以方便地导入到其他工具中进行管理和分析。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持多种格式：Endor Labs 支持生成多种格式的SBOM，如JSON、 SPDX 和
CycloneDX等，以满足不同用户的需求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4.3可视化的依赖关系展示&lt;/p&gt;
&lt;p&gt;Endor Labs
通过将软件供应链中的所有组件及其依赖关系存储在数据库中，并通过基于web的用户界面将其可视化展示。如图5所示
用户可以使用这个界面，快速浏览、分析和跟踪整个供应链软件成分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image6.png&#34;
style=&#34;width:4.57157in;height:2.57151in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/6340e4502bdcd247cc109c78_Direct%20Dependency%20Context%20-%20Methods%20Tab.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图5 依赖关系可视化&lt;/p&gt;
&lt;p&gt;其可视化依赖关系将给开发人员和安全人员带来诸多好处，如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;缩短响应时间：通过展示易受攻击的软件包的使用位置，可视化展示可以帮助组织更快速地响应安全事件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取清晰的依赖项地图：通过可视化展示，组织可以更好地了解每个包的直接和传递依赖项，并且可以更轻松地识别依赖项之间的关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;减少依赖关系总量：通过查找机会减少依赖关系总量，可视化展示可以帮助组织减少依赖项，从而降低复杂性和风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找常用依赖项版本：通过查找组织中最常用的依赖项版本，可视化展示可以帮助组织更好地管理软件组件，并确保组件的版本控制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4.4 多维度风险评分，治理开源软件&lt;/p&gt;
&lt;p&gt;如图6 所示，Endor
Labs使用多维风险评分机制来建立自动化审批和准入，实现了开源软件的治理。笔者分析，Endor
Labs可能通过以下方式来实现开源软件的治理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采集开源软件元数据：使用静态分析等综合技术来采集开源软件的元数据，包括版本号、许可证、依赖项、漏洞信息、受欢迎程度等。这些数据可以用于分析开源软件的风险程度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多维风险评分：从多个维度（如安全评分、受欢迎程度、活动和质量等）根据算法对开源软件进行评分,
将评分结果可视化展示给用户，利用这些分数可以设置准入阈值，以帮助用户更好选择高质量的依赖项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动化审批：当企业员工使用开源软件时，通过预先设置的准入阈值，自动化审批来确保开源软件的合规性。如果某个软件的风险评分超过了预设的阈值，Endor
Labs会阻止其被使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image7.png&#34;
style=&#34;width:4.48466in;height:3.07386in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/6343352ab9d4ce3eedb2b577_Dependency%20Details%20-%20Dependencies%20Tab%20(2).png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图6 开源软件治理&lt;/p&gt;
&lt;p&gt;通过采用这些措施，Endor
Labs可以帮助企业更好地管理开源软件，以提高开发速度并减少安全团队和开发团队之间的摩擦。&lt;/p&gt;
&lt;p&gt;4.5 最优依赖关系选择&lt;/p&gt;
&lt;p&gt;如图7和图8所示，依托于多维度的依赖项评分机制，Endor
Labs还支持在IDE中为开发人员提供即时反馈，以便开发者在引入开源软件时就能做出最佳决策，最大限度地重用组织内的流行版本，降低风险和维护成本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image8.png&#34;
style=&#34;width:4.58793in;height:2.58071in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/634105176a3b91177860ef53_Dependency%20Details%20-%20Overview%20Tab%20v1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图7 依赖版本评分&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image9.png&#34;
style=&#34;width:4.53711in;height:2.94535in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/63410047da79c94965adea43_1.1%20IDE%20Inline%20workflow_%20Display%20problems%20and%20reccomendations%20(1).png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图8 Endor Labs支持IDE&lt;/p&gt;
&lt;p&gt;4.6 减少噪音，确定漏洞优先级，&lt;/p&gt;
&lt;p&gt;如图9所示，Endor
Labs通过对开源软件安全危害和修复进行优先级评定，帮助开发团队和工程团队缩小安全修复范围(Endor
Labs宣称可减少高达80%误报告警)，减少技术债务，专注于修复真正影响业务的漏洞。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image10.png&#34;
style=&#34;width:4.6002in;height:2.58761in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/634100b8b6d884b8f03653d9_Package%20Details%20-%20Findings%20Details%20(1).png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图9 软件风险优先级&lt;/p&gt;
&lt;p&gt;笔者分析，其风险评定方式主要包含以下方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于可达性的依赖关系分析：通过静态调用图在细粒度级别执行依赖关系分析，同时在内部使用动态调用图来形成基准，根据这些基准来衡量和优化调用图，结合两种分析技术，通过可达性分析算法计算每个依赖项的可达性程度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于机器学习技术来减少噪音：利用多种数据源，如CVE数据库、NVD数据库和开源代码库等，对软件漏洞和安全漏洞进行全面分析和跟踪。然后，利用自然语言处理技术和机器学习算法来对漏洞进行自动化分类和评估，以减少噪音和确定漏洞的优先级。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4.7 供应链攻击检测和响应&lt;/p&gt;
&lt;p&gt;如图10所示，Endor
Labs宣称其支持检测下一代攻击，例如域名仿冒和依赖混淆。监视已知漏洞行为。通过查明易受攻击的软件包的使用位置以及依赖于它的应用程序，快速响应问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image11.png&#34;
style=&#34;width:4.77198in;height:2.68423in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/634334852bdcd2a12d291b03_Package%20Details%20-%20Findings%20Aggregation%20View.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图10攻击检测&lt;/p&gt;
&lt;p&gt;笔者分析，其检测和响应可能通过以下方式实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;提供严格的开源软件准入规则：设置合理的评分阈值，使用可靠的源（trusted
sources）来减少供应链攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速响应：基于多维度的安全评分和调用图，匹配攻击影响的对应漏洞，快速定位到调用位置，快速处置（如切断或替换等）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;持续监控：持续检测历史版本发现的新漏洞或则新版本变化可能带来的影响，对现有开源库进行更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4.8 开源软件库的维护&lt;/p&gt;
&lt;p&gt;随着业务迭代或者开源工具的演进，部分开源软件可能不再被使用，或者历史引入的开源软件已经停止维护等等，正因为如此将给组织带来大量的被攻击风险。Endor
Labs宣称支持通过以下方式对现有的开源软件进行持续维护，以规避以上问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减少依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;删除未使用的依赖项可降低安全风险，还可以降低运营成本，并提高应用程序性能和构建时间。如图11所示，Endor
Labs支持检测未使用的依赖项，以提醒开发团队将其删除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image12.png&#34;
style=&#34;width:4.90747in;height:2.81152in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/634106ece45e014fafdaeeab_Project%20Details%20-%20Package%20Summary.png&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图11 开源软件依赖项检测&lt;/p&gt;
&lt;p&gt;笔者分析，Endor Labs依赖项的处理大致包含以下几个方面：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;识别并删除未使用的依赖项：通过可达性依赖分析技术，分析应用程序中未被使用的依赖项，从而帮助团队识别并删除不必要的依赖项，减少攻击面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过减少使用的依赖项数量来减少整体攻击面：通过优化依赖项的选择和使用，减少应用程序的依赖项数量，从而降低应用程序的整体攻击面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在冗余依赖项上整合版本：通过分析应用程序中的依赖项，识别并整合重复的依赖项版本，从而减少应用程序的攻击面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过简化依赖项关系图缩短构建时间：通过优化依赖项的选择和使用，简化依赖项关系图，从而缩短构建时间，提高应用程序的开发效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- --&gt;
&lt;ol&gt;
&lt;li&gt;未维护包检测&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Endor
Labs支持检测开源软件是否被继续维护。为用户是否应删除、内部维护或替换依赖项的决策提供数据支撑。如果使用长期未维护的开源软件或者对应版本，当有对应的漏洞产生时，将无法及时被修复，这将对产品造成巨大的安全隐患。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;笔者分析，其检测手段可能包含以下内容:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;监视开源软件社区：密切关注开源软件社区，了解开源软件的支持情况以及最新的安全修复。当一个软件项目被宣布不再维护时，在对应的软件信息进行标注。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析依赖项版本：分析软件项目的依赖项版本，并对废弃的版本进行跟踪。当一个废弃版本出现安全漏洞时，在软件信息进行告警，降低评分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4.9 基于ChatGPT的智能问答机器人-DroidGPT&lt;/p&gt;
&lt;p&gt;Endor
Labs结合ChatGPT推出了DroidGPT功能。如图12所示[6]，该功能支持针对开源软件安全问题进行交互式问答，获取即时的安全风险评估、漏洞分析和修复建议等信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image13.jpeg&#34;
style=&#34;width:4.59035in;height:2.86341in&#34;
alt=&#34;https://uploads-ssl.webflow.com/629c94f2f665fd8f65f2537f/642decbb289f1949a3c36c45_Sequence%2001.00_00_28_49.Still001.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图12 DroidGPT使用展示&lt;/p&gt;
&lt;p&gt;从仅有的官方视频来看，Endor
Labs目前对ChatGPT的应用还比较单一，即作为智能问答机器人帮助使用者更快地获取所需的信息。从技术实现上来讲，目前的结合现状只需要将采集的元数据和漏洞等信息作为输入，利用ChatGPT的自然语言处理技术，结合可视化交互式界面即可快速的集成并达到效果。&lt;/p&gt;
&lt;p&gt;5.0 产品对比&lt;/p&gt;
&lt;p&gt;在产品功能上来讲软件组合分析（SCA）工具在很多时候也被用来管理OSS，那么Endor
Labs和SCA有什么区别呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检测精度：Endor
Labs采用了更先进的算法和机器学习模型，可以更准确地识别潜在的漏洞和安全风险。而传统SCA通常只能基于已知的漏洞数据库和规则来进行检测，可能会漏检一些新的或未知的漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可扩展性：Endor
Labs可以轻松地适应大规模复杂软件供应链的检测需求，并提供了灵活的定制化配置选项。而传统SCA的覆盖范围和可扩展性可能会受到限制，难以应对复杂的供应链结构和高度定制化的软件组成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可视性：Endor
Labs提供了直观易用的用户界面，帮助用户更快速地发现和解决潜在的安全问题。同时，Endor
Labs还提供了自动化的检测和报告功能，可以减少用户的手动工作量。而传统SCA通常需要用户自行解释和处理检测结果，并缺乏自动化的报告和协作功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;响应能力：Endor
Labs不仅能够帮助用户快速发现潜在的安全问题，还能够提供可操作的建议和响应方案，以便用户能够更快速地修复漏洞并降低安全风险。而传统SCA通常只能提供基础的漏洞信息和补丁推荐，需要用户自行研究和执行修复方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据源多样性：Endor
Labs可以整合多种数据源，包括公共漏洞数据库、开源软件组件信息、代码库信息、社交媒体信息等，从多个角度来分析潜在的安全风险。而传统SCA主要依赖公共漏洞数据库和组件信息来进行分析，缺乏多样性和深度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上所述，SCA主要原理是通过元数据扫描，并将扫描结果和已知的漏洞数据进行比对，以此评估开源软件的安全性。Endor
Labs的方法比传统SCA更全面，包括从不同方面收集和分析数据，使用机器学习算法来减少噪音并提高准确性。此外，Endor
Labs还提供了可达性依赖分析和供应链攻击检测和响应的功能，以及针对对应的风险提供更多的可操作建议来支持内部团队进行安全闭环，以帮助用户更好地管理和降低供应链攻击的风险。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从技术上来看，Endor
Labs主要应用了静态分析、动态分析、依赖分析、机器学习等技术来实现开源软件安全风险评估和漏洞管理的解决方案。随着AI和机器学习技术的发展，Endor
Labs可能会进一步提升其机器学习算法的能力或者在更多场景结合ChatGPT技术（比如调用关系图和未知风险监测方面），以更准确地识别和管理安全威胁。此外，随着可信计算等新技术的发展，Endor
Labs可能会进一步扩展其解决方案的能力和范围，以满足不断增长的安全需求。&lt;/p&gt;
&lt;p&gt;从赛道上来看，随着开源软件在开发中的广泛应用，越来越多的公司依赖于开源组件来构建他们的应用。然而，这也意味着开源软件安全将变得更加重要。Endor
Labs的技术着眼于解决这个问题，帮助企业降低开源软件的安全风险并确保其供应链的安全性。预计在未来，随着开源软件使用的继续增长，这个市场将会继续扩大，并且与之相关的供应链安全技术也将变得越来越重要。&lt;/p&gt;
&lt;p&gt;参考文献&lt;/p&gt;
&lt;p&gt;[1] Ron Harnik.Endor Labs Launches with $25M Seed Financing to Tackle
Massive Sprawl of Open Source Software (OSS)&lt;/p&gt;
&lt;p&gt;[2] Forrester.The State Of Application Security, 2021&lt;/p&gt;
&lt;p&gt;[3] 中国科学院软件研究所.开源软件供应链安全研究综述&lt;/p&gt;
&lt;p&gt;[4] the White House.Readout of White House Meeting on Software Security&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&#34;https://www.endorlabs.com/platform&#34;&gt;https://www.endorlabs.com/platform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6] &lt;a href=&#34;https://www.endorlabs.com/droidgpt&#34;&gt;https://www.endorlabs.com/droidgpt&lt;/a&gt;&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>RSA创新沙盒盘点｜Cado Security—云原生取证和响应</title>
                <link>https://cloud-Xolt.github.io/posts/rsac-cado/</link>
                <guid isPermaLink="true">https://cloud-Xolt.github.io/posts/rsac-cado/</guid>
                <pubDate>Wed, 06 Dec 2023 17:28:01 &#43;0800</pubDate>
                
                    <author>wo2g9cai@gmail.com (JOON)</author>
                
                
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;专题 云原生 标签 取证和响应&lt;/br&gt;
首发于&lt;a href=&#34;https://mp.weixin.qq.com/s/A8GOxkRXc0Cy0SzzgabLQA&#34;&gt;创新研究院官方博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;公司介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cado Security
是一家云原生网络取证和响应平台提供商。该公司于2020年4月成立，目前在英国和美国设有办事处，旨在为安全团队提供更智能、更快速的方式来调查和响应云中的网络安全事件。该公司成立不久便获得150万美元的种子轮融资，2021年又获得1000万美元的A轮融资。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image1.png&#34;
style=&#34;width:5.76806in;height:3.09444in&#34;
alt=&#34;C:\Users\zhangxiaoyong\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\A2981C3C.tmp&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1 Cado Security创始人&lt;/p&gt;
&lt;p&gt;值得关注的是，其创始人团队阵容（如图1所示&lt;sup&gt;[&lt;/sup&gt;[1]&lt;sup&gt;]&lt;/sup&gt;），首席执行官兼联合创始人James
Campbell具有丰富的网络事件响应经验和国家情报工作背景，首席技术官兼联合创始人Chris
Doman是著名的威胁情报平台——ThreatCrowd的构建者，对威胁情报研究的重要性不言而喻。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;背景介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随着全球数字化转型热潮推进，为提高开发敏捷性和速度，企业逐步将其工作和应用转移到云环境中。云化为租户提供了无数好处，包括更大的敏捷性、灵活性和协作性，但它也带来了新的安全挑战。&lt;/p&gt;
&lt;p&gt;正如图2所示&lt;sup&gt;[&lt;/sup&gt;[2]&lt;sup&gt;]&lt;/sup&gt;，随着云化使用的增加，面向云环境的网络攻击数量也在增加。&lt;/p&gt;
&lt;p&gt;《Palo Alto Networks Cloud Threat Report 1H
2021》也指出，零售、制造业和政府受到的影响最大，云事件分别增加了
402%、230% 和 205%&lt;sup&gt;[3]&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image2.png&#34;
style=&#34;width:5.39196in;height:2.53888in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2 State of Cloud Security 2021-云数据泄露比例&lt;/p&gt;
&lt;p&gt;尽管新兴市场的兴起使得安全防护工具逐步向云化场景靠近，但始终没有固若金汤的环境，当云中发生网络安全事件时，数字取证和事件响应变得愈发紧急和重要。然而实际在云环境取证时却面临较多问题，如取证环境往往是多云环境，亦或是多节点或临时性的容器等复杂场景，依靠人工组合有限的工具或者手动获取信息数据经常非常复杂且耗时，且由于环境的差异性或者权限的限制导致证据收集往往停留在现象表面。种种原因都可能导致攻击者达成目标后逃逸并且销毁证据。&lt;/p&gt;
&lt;p&gt;在云原生环境中调查需要快速响应、全面跟踪信息和上下文，这使得依靠安全团队进行人工处理变得更加困难，因此云安全市场对能够解决该痛点的安全产品产生了强烈需求。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;功能特点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cado Security发布的Cado Response
是一个无代理的云原生数字取证平台。平台支持通过跨多云环境、临时容器、无服务器环境和本地系统进行事件响应取证调查。通过其自动化数据捕获和处理能力，可以轻松为安全团队提供取证级别的详细信息和前所未有的上下文搜索，以消除云调查的复杂性。正如图3所示&lt;sup&gt;[&lt;/sup&gt;[3]&lt;sup&gt;]&lt;/sup&gt;，Cado
Response简洁的组件交互使得其在云上的部署更加便捷。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image3.png&#34;
style=&#34;width:5.76806in;height:2.9875in&#34;
alt=&#34;C:\Users\zhangxiaoyong\Documents\WXWork\1688851816357974\Cache\Image\2022-05\企业微信截图_16526966759717.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图3 Cado Response关键组件交互&lt;/p&gt;
&lt;p&gt;下面我们来看看Cado Response在哪些方面具有较好的实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;环境采集场景丰富&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从官网得知目前Cado
Response支持从AWS环境（如图4所示&lt;sup&gt;[&lt;/sup&gt;[4]&lt;sup&gt;]&lt;/sup&gt;，包括
EC2实例、Kubernetes 服务以及文件系统）、Azure
环境（包括虚拟机、磁盘）、容器环境、无服务器环境和本地环境进行自动化调查取证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image4.png&#34;
style=&#34;width:5.4363in;height:2.74629in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图4 AWS环境信息导入&lt;/p&gt;
&lt;p&gt;依赖于其无代理的采集方式，Cado
Response对信息采集的种类丰富。在云化业务里，能够支持越多的云厂商环境，对产品的成长将会越有利。目前该平台涵盖了国外主流的两大云厂商，也满足其在产品成长期有足够的舞台打磨产品特性的需求。&lt;/p&gt;
&lt;p&gt;关于Cado
Response无代理采集方式的技术实现，虽然没有在官网找到具体实现细节（如图6图7所示&lt;sup&gt;[&lt;/sup&gt;[5]&lt;sup&gt;]&lt;/sup&gt;），但根据一些采集依赖（如AWS
ECS数据采集）的说明不难猜测，其实现的方式和2021年RSAC提名的WIZ（如图5所示&lt;sup&gt;[&lt;/sup&gt;[6]&lt;sup&gt;]&lt;/sup&gt;）并无二致，可能都是利用云管或者其他组件API进行获取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image5.png&#34;
style=&#34;width:5.76806in;height:2.7375in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图5 WIZ关于无代理扫描的描述&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image6.png&#34;
style=&#34;width:5.76806in;height:2.42778in&#34;
alt=&#34;C:\Users\ZHANGX~1\AppData\Local\Temp\企业微信截图_16527506041105.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图6 Cado Response采集AWS ESC数据的条件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image7.png&#34;
style=&#34;width:5.76806in;height:1.5875in&#34;
alt=&#34;C:\Users\ZHANGX~1\AppData\Local\Temp\企业微信截图_16527508488062.png&#34; /&gt;图7
AWS关于ECS Exec的支持&lt;/p&gt;
&lt;p&gt;这里有必要澄清的是，Cado
Response的无代理模式是针对云场景的采集方式，其支持的主机采集仍然采用传统的脚本采集方式，正如图8所示&lt;sup&gt;[&lt;/sup&gt;[7]&lt;sup&gt;]&lt;/sup&gt;脚本支持从平台生成和直接下载两种方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image8.png&#34;
style=&#34;width:5.76806in;height:4.10556in&#34;
alt=&#34;C:\Users\zhangxiaoyong\Documents\WXWork\1688851816357974\Cache\Image\2022-05\企业微信截图_16527502473906.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图8 主机采集脚本下载&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取证速度快，结果可视化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;依赖于Cado
Response正在申请专利的自动化工具和架构方法（因此具体方法没有详细的说明），可自动向上和向下扩展以提供快速、并行的数据处理，以及大量的自动化工具集，其取证响应迅速。以AWS的ECS调查取证为例，选定具体的集群和任务后，短短几分钟即可以看到一些可疑活动已被标记并展示出来（如图9所示&lt;sup&gt;[5]&lt;/sup&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image9.png&#34;
style=&#34;width:5.63961in;height:2.47964in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图9 被标记的可疑活动证据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持自动识别和风险标注&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;得益于机器学习和威胁情报的基础能力，取证结果支持自动识别威胁活动，并标注告警。当发现可疑的活动后，其告警页面有具体响应的告警活动，如图10所示&lt;sup&gt;[5]&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image10.png&#34;
style=&#34;width:5.67087in;height:3.06961in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图10 Cado Response的xmrig告警&lt;/p&gt;
&lt;p&gt;相对于面向云原生的XDR检测技术，Cado
Response更专注于情报数据的内容对比检测（官方现有资料中没有找到除威胁情报检测技术外的其他描述）。考虑到Cado
Response在安全响应方案工作流程（如图15所示&lt;sup&gt;[10]&lt;/sup&gt;）中所处的环节，此处的检测面也足以满足产品本身对威胁活动的求证需求。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持多维度搜索云威胁&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;得益于其丰富的情报数据，使得Cado
Response支持多维度的搜索以及上下文管理。如图11所示&lt;sup&gt;[&lt;/sup&gt;[8]&lt;sup&gt;]&lt;/sup&gt;，Cado
Response支持对日志、磁盘、内存、进程以及历史交互命令等情报数据进行采集，采集的数据安全存储（支持权限控制和备份机制）后，安全团队或分析员只需在UI上直接调查云威胁活动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image11.png&#34;
style=&#34;width:4.58725in;height:2.80117in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图11 数据覆盖描述&lt;/p&gt;
&lt;p&gt;如图12所示&lt;sup&gt;[5]&lt;/sup&gt;，针对具体的可疑活动，找到可疑活动的上下文，查看活动前期生成的文件或者后期执行的命令，进而分析文件内容，锁定可疑关键词，方便后续全局搜索，查找其他藏匿点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image12.png&#34;
style=&#34;width:5.56389in;height:3.40069in&#34;
alt=&#34;C:\Users\zhangxiaoyong\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\CE7F29C0.tmp&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图12 xmrig异常活动搜索&lt;/p&gt;
&lt;p&gt;值得一提的是，平台也支持对文件的基本解析，绘制链路关系，标注发现的异常点，从而帮助分析简化取证。但从现有资料来看，目前的解析方法可能只是固定的规则配置，比如图13中文件的特定地址匹配&lt;sup&gt;[5]&lt;/sup&gt;，但即使是这个程度的解析也会给分析人员带来巨大的便捷。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image13.png&#34;
style=&#34;width:5.58889in;height:3.34861in&#34;
alt=&#34;C:\Users\zhangxiaoyong\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\670CF5CE.tmp&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图13 外链矿池可疑文件解析&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集成解决方案成熟&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从官网材料获悉，Cado Response已有与Splunk
SOAR和SentinelOne的集成方案。例如通过Cado Response和Splunk
SOAR的集成，在事件检测之后，Splunk
SOAR将触发Cado响应平台以在受影响的多云、跨云环境中捕获数据。&lt;/p&gt;
&lt;p&gt;通过和SOAR集成，安全团队可以自定义剧本（如图14所示&lt;sup&gt;[&lt;/sup&gt;[9]&lt;sup&gt;]&lt;/sup&gt;），以便在检测到恶意活动后立即自动捕获关键事件证据。自定义剧本也为用户定制化需求提供了一种低成本且较为通用的实现方式，能够在扩充产品能力的同时，优化用户体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image14.png&#34;
style=&#34;width:5.76806in;height:2.52708in&#34;
alt=&#34;C:\Users\zhangxiaoyong\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\F70DB30C.tmp&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图14自定义剧本&lt;/p&gt;
&lt;p&gt;通过与第三方链路安全产品的集成，实现如图15所示的&lt;sup&gt;[&lt;/sup&gt;[10]&lt;sup&gt;]&lt;/sup&gt;上下游联动，便能够加快事件响应速度、缩短调查和响应时间。利用端到端的自动化策略配置，能确保在事件数据消失之前捕获到事件数据。相信租户在云端的安全需求将会逐步被众多集成解决方案完全覆盖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image15.png&#34;
style=&#34;width:3.82677in;height:3.39784in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图15 安全响应方案工作流程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从首席执行官兼联合创始人James Campbell的履历不难看出，Cado
Response的产生应该是顺其自然的事情，我们猜测James在多年的网络事件响应和网络取证工作中已经深刻意识到人工搜集大面积情报的痛点和难点，特别是云环境场景下，而其丰富的取证最佳实践方案也最终会落到产品上。再看另一位联合创始人Chris
Doman，威胁情报研究和实操经验丰富，单从团队阵容来看，也能给以投资人和客户足够的信心。&lt;/p&gt;
&lt;p&gt;从云原生网络取证和响应的赛道来看，正如Cado
Security官方宣称，目前来看专注于云原生网络取证和响应的产品Cado
Response具有优势。且随着全球数字化的推进，云安全赛道毋容置疑是一个新的热点，云原生安全场景下的网络取证和响应则是必不可少的一环。早在2017
年，云安全联盟（CSA，Cloud Security
Alliance）发布的《云计算关键领域安全指南V4.0》也将云取证重点关注。2019年中科院研究所也结合国内现状对云环境下的电子取证做了分析。随着我国《网络安全法》对网络运营商的责任和义务的强化，云取证在国内也必将成为云平台合理合法运营的重要保障&lt;sup&gt;[&lt;/sup&gt;[11]&lt;sup&gt;]&lt;/sup&gt;。在这些因素影响下，我们猜测Cado
Security也将有快速的发展。&lt;/p&gt;
&lt;p&gt;对于Cado Response的总结和预估:
该平台有强大的情报收集实践指导，加之既有的情报平台（ThreatCrowd）技术沉淀，相信其在情报的收集侧会保持不错的优势。虽然现有的材料没有明显体现出平台对情报的情景化和智能化的处理和预判，因此我们暂时还无法就该平台的智能化场景进行详细分析，但Cado
Response的官网强调了机器学习在处理和预判中的作用，因此我们相信以后会在Cado
Response的产品与宣传材料中看到更多关于机器学习的功能与特性。&lt;/p&gt;
&lt;p&gt;参考文献&lt;/p&gt;
&lt;p&gt;[1]  &lt;a href=&#34;https://docs.cadosecurity.com/cado-response/getting-started/deploy/aws-deploy&#34;&gt;Cado
Security&lt;/a&gt;.
Cado Leadership Team.&lt;/p&gt;
&lt;p&gt;[2]  IDC&amp;amp;Ermetic. State of Cloud Security 2021.&lt;/p&gt;
&lt;p&gt;[3]  &lt;a href=&#34;https://docs.cadosecurity.com/cado-response/getting-started/deploy/aws-deploy&#34;&gt;Cado
Security&lt;/a&gt;.
AWS Deployment Overview.&lt;/p&gt;
&lt;p&gt;[4]  Cado Security. Securing and Investigating
Containerized Applications Running on AWS ECS.&lt;/p&gt;
&lt;p&gt;[5]  &lt;a href=&#34;https://docs.cadosecurity.com/cado-response/getting-started/deploy/aws-deploy&#34;&gt;Cado
Security&lt;/a&gt;.
ECS Import Requirements.&lt;/p&gt;
&lt;p&gt;[6]  WIZ. Agents are not enough: Why cloud security needs
agentless deep scanning.&lt;/p&gt;
&lt;p&gt;[7]  &lt;a href=&#34;https://docs.cadosecurity.com/cado-response/getting-started/deploy/aws-deploy&#34;&gt;Cado
Security&lt;/a&gt;.
Deploying Cado Host.&lt;/p&gt;
&lt;p&gt;[8]  &lt;a href=&#34;https://docs.cadosecurity.com/cado-response/getting-started/deploy/aws-deploy&#34;&gt;Cado
Security&lt;/a&gt;.
Overview.&lt;/p&gt;
&lt;p&gt;[9]  &lt;a href=&#34;https://docs.cadosecurity.com/cado-response/getting-started/deploy/aws-deploy&#34;&gt;Cado
Security&lt;/a&gt;.
Cado Response &amp;amp; Splunk SOAR Integration.&lt;/p&gt;
&lt;p&gt;[10]  &lt;a href=&#34;https://docs.cadosecurity.com/cado-response/getting-started/deploy/aws-deploy&#34;&gt;Cado
Security&lt;/a&gt;.
The Ultimate Guide to Automating Incident Response.&lt;/p&gt;
&lt;p&gt;[11]  中科院软件研究所. 云环境下的电子数据取证技术研究.&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>Kubernetes集群的攻与防</title>
                <link>https://cloud-Xolt.github.io/posts/k8s-security/</link>
                <guid isPermaLink="true">https://cloud-Xolt.github.io/posts/k8s-security/</guid>
                <pubDate>Mon, 04 Dec 2023 11:22:22 &#43;0800</pubDate>
                
                    <author>wo2g9cai@gmail.com (JOON)</author>
                
                
                
                    <description>&lt;blockquote&gt;
&lt;p&gt;专题 云原生 标签 Kubernetes集群安全&lt;/br&gt;
首发于&lt;a href=&#34;https://mp.weixin.qq.com/s/L2AOMJW7s9bYocE_e0K9kg&#34;&gt;创新研究院官方博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在2022年RSA大会上，来自CyberArk的高级安全研究员 Eviatar
Gerzi为我们分享了Kubernetes集群的攻击面和防御策略以及如何利用两款开源工具（Kubesploit和KubiScan）对集群环境进行攻击和防御。本文试图以Gerzi的思路为依据，从攻击和防御的角度来简单聊一聊Kubernetes集群安全。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- --&gt;
&lt;ol&gt;
&lt;li&gt;Kubernetes简介&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes是一个可移植、可扩展的开源平台，用于管理容器化工作负载和服务&lt;sup&gt;[&lt;/sup&gt;[1]&lt;sup&gt;]&lt;/sup&gt;。据stackshare的报道显示，已经有超过3000家公司在使用Kubernetes，其中不乏知名的头部企业&lt;sup&gt;[&lt;/sup&gt;[2]&lt;sup&gt;]&lt;/sup&gt;，毫无疑问Kubernetes是最受欢迎的容器管理平台之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Kubesploit简介&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubesploit是一款针对容器化环境的模拟真实攻击的跨平台开源工具，旨在为
PT 团队和红队人员在容器化环境攻击期间提供帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;架构说明&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;该工具基于merlin项目并集成yaegi项目实现。Merlin具有良好的C&amp;amp;C
和代理基础设施，满足了图1-1中的Center到Agent的架构需求，而其多样化的代理流量加密技术则保证了代码远程投送的安全性。Yaegi则是一个go语音解释器，用于解决远程投递的go语言代码在Agent端执行问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image1.png&#34;
style=&#34;width:2.81096in;height:1.25278in&#34;
alt=&#34;C:\Users\zhangxiaoyong\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\38C90A16.tmp&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1-1 远程代码执行示意图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;功能场景介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;截止目前，如图1-2，Kubesploit 项目已公布支持功能场景有15个[3]。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image2.png&#34;
style=&#34;width:2.26042in;height:2.48496in&#34;
alt=&#34;C:\Users\zhangxiaoyong\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\AFC30A98.tmp&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1-2 Kubesploit 攻击模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;KubiScan简介&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;KubiScan是一款基于角色访问控制 (RBAC) 授权模型的Kubernetes
集群扫描工具。该工具旨在自动化收集有关风险角色\集群角色、角色绑定\集群绑定、用户和
pod
的信息，帮助集群管理员识别攻击者可能利用来破坏集群的权限，降低集群风险[4]。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image3.png&#34;
style=&#34;width:3.79471in;height:1.9106in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图1-3 KubiScan功能特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该工具支持以下两种方式运行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在集群主机上以容器方式运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在主节点或者远程主机上使用python3运行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于KubiScan某些功能需要特权服务账号，可以使用kube/config或者使用相应权限的服务账号令牌来解决。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes集群安全&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据IDC预测，国内市场到2025年容器基础架构软件的市场规模将达10亿美元，容器市场规模的增长，必将面临容器管理的难题，而Kubernetes是个不错的选择。
Kubernetes集群安全也将面临更严峻的考验，只要有一个Kubernetes自身或者其他容器架构的一个可利用途径被证实也必将对市场安全带来较大的影响。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image4.png&#34;
style=&#34;width:4.48075in;height:3.56259in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2-1 中国软件市场预测&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;站在攻击的角度看Kubernetes集群安全&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;从攻击链路来（见图2-2）&lt;sup&gt;[&lt;/sup&gt;[5]&lt;sup&gt;]&lt;/sup&gt;讲，集群安全可以分为两部分去看：一是集群组件，二是集群中运行的程序。这并不意味着集群组件和运行程序是相互独立的，相反，任何一方面的可利用点，都将是攻击者获取全部资源的有利抓手。如果攻击者通过前期手段控制了一个运行业务的容器，那么攻击者就可以通过该容器逃逸到容器所在的节点。如果控制了某个node节点，就可以控制该节点的上的pod，或者利用cve漏洞间接获取主节点权限。如果攻击者通过内部提权或者外部接口控制了主节点权限，那集群的几乎所有信息将会被轻易获取和接管。另外需要补充的是如etcd类的组件也需要关注，一旦控制了etcd，便可以间接获取整个集群。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image5.png&#34;
style=&#34;width:5.06389in;height:3.27708in&#34;
alt=&#34;C:\Users\zhangxiaoyong\Documents\WXWork\1688851816357974\Cache\Image\2022-04\企业微信截图_16494012018812.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2-2云原生攻击链路&lt;/p&gt;
&lt;p&gt;从威胁矩阵来看，我们不妨沿用微软发布的Kubernetes威胁矩阵&lt;sup&gt;[&lt;/sup&gt;[6]&lt;sup&gt;]&lt;/sup&gt;（如图2-3），对Kubernetes集群的攻击主要有10种手段：初始访问、执行、持久化、权限提升、防御绕过、凭证获取、资源发现、横向移动、数据收集、施加影响。这是微软更新的第二个矩阵版本，该矩阵调整了
MITRE ATT&amp;amp;CK®
框架的结构，几乎成为了描述面向集群的安全威胁的行业标准。随着
Kubernetes
的发展，一些已知的威胁被修复，故这部分矩阵上的技术被淘汰，新技术的应用也引入了新的威胁，这些威胁被加入了新版本的威胁矩阵。接下来我们就具体的矩阵策略聊一聊集群攻击。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image6.png&#34;
style=&#34;width:5.38569in;height:3.31078in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2-3 Kubernetes攻击矩阵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;初始访问&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;该攻击方式下攻击者主要通过一些攻击技术来获取集群资源的访问权限，包括直接通过集群管理层获取或者间接通过集群内的承载业务对访问权限进行获取。如通过泄露的云账号信息、镜像仓库投毒等方式注入恶意镜像、泄露的Kubeconfig文件、易攻击的应用程序、暴露的敏感接口等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;执行&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;攻击者主要采用各种手段去达到能在集群内执行命令的效果。如果你已经拥有exec执行权限，那么你可以轻易的执行命令去渗透到容器内，达到后门、提权等一系列的目的。主要手段如：创建新的容器或注入者边车容器、利用代码执行漏洞的应用程序、远程ssh访问容器等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;持久化&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当攻击者拿下一定的集群权限后，对权限做固化是一个必须的选项。这时候可以利用Kubernetes
控制器在集群中运长期运行后门容器或者定时执行定时任务，在容器内建立持久性，如果有权限挂载hostPath，那么也可以对节点主机持久化。 另一个新思路是通过准入控制器webhook，拦截请求获取口令信息，达到目的，相比于侵入式的方式，这个方式似乎更加一劳永逸，但也要考虑口令的变动，在具体场景中组合使用可能会更加合适。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;权限提升&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;攻击过程中获取的权限和资源往往是有限的，这个时候，利用现有资源获取更多权限是下一步必须需要实施的。如通过特权容器可以获取到主机上的大部分资源。除此之外，通过RBAC（角色访问控制）创建或者绑定高权限的角色、通过宿主机挂载逃逸到节点主机等也是攻击者进行权限提升的常见手段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;防御绕过&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;该攻击方式主要指攻击者通过一些技术去隐藏其攻击动作从而避免被检测到。我们不妨从检测的几个维度去思考，常见的检测一般基于：日志（包括系统和应用）、事件（大部分是平台如Kubernetes事件）、资源名称（容器、pod、服务等）、资源基线（如镜像基线等），那么对这些检测数据的源头进行清除和伪装将是很好的防御绕过手段。另外对攻击者自身行为和身份的隐藏也是对溯源的一个有效的绕过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;凭证获取&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;该攻击方式主要包含通过一系列技术手段获取服务应用凭证。例如大部分的服务凭证将会被保存到Secret中，这时候在同域（如pod，namespace）下的应用将有权使用这些信息。如果能够直接取得节点管理权限，直接列出这些凭证也不是没有可能。值得注意的是，即使没有直接的节点管理权限，如果RBAC没有配置，那么以应用程序身份也可以直接通过API从Kubernetes获取凭证信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;资源发现&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当攻击者进入集群，首先需要搞清楚的是：这个集群都有些啥，然后才能继续开展后续的攻击活动。这里最直接的方式是访问各种API/Web界面获取，如Kubernetes
API/Web UI、Kubelet API、元数据
API等。实际的环境中，该攻击方式往往还需要进一步的网络监控手段，如通过网络探测发现其他应用程序的资源，进而扫描其中包含的漏洞等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;横向移动&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;当发现了可用资源（如容器、pod、节点等）后，攻击者需要进一步对其他资源进行侦查，以掌握不同资源的给定可用权限，并利用已有权限渗透到这些资源，进行进一步的攻击。对资源进行侦察和渗透的大致思路包含了从边缘间接资源侦查（如云内的场景下通过hostPath挂载，利用单个容器访问权限获取到集群外云资源等）、集群资源的侦查（如通过凭证获取阶段RBAC策略未配置或配置不合理的场景获取资源，利用SA权限获得集群资源）、对主机资源的侦查（如创建可写的hostPath挂载容器）、DNS投毒（修改CoreDNS，获取其他服务的真实网络身份）、ARP/IP欺骗等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;数据收集&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;该攻击手段是21年微软矩阵版本中新增的，目前主要包含利用既有权限，从私有仓库拉取镜像。笔者推测该攻击手段是用于持久化，或用于在其他横向移动等攻击手段中新建容器，或用于镜像投毒等（需要考虑仓库的准入等机制）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;施加影响&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;该攻击手段主要是集群中的资源和活动，如数据破坏(包含集群组件和应用程序)、资源劫持（指利用集群资源进行其他任务活动，如挖矿等）。拒绝服务（通过恶意的资源占用如网络，使得正常活动无法运行或者运行受损）等技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;站在防御的角度看Kubernetes集群安全&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;笔者始终认为专业的事交给专业的产品，Kubernetes集群防御主要还是应该依托防御安全产品（如绿盟的云原生安全平台），所以我们今天从环境加固方面去聊一聊安全防御。Gerzi在会议中分享了针对集群防御的最佳加固实践&lt;sup&gt;[&lt;/sup&gt;[7]&lt;sup&gt;]&lt;/sup&gt;，如图2-4所示，加固策略几乎覆盖了大部分攻击手段。接下来我们简要聊一聊加固策略的大致内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image7.png&#34;
style=&#34;width:5.14756in;height:2.55085in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2-4 集群加固的最佳实践&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kubernetes集群安全配置&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;笔者理解该策略首先包含对Kubernetes
API的访问控制。除此之外，使用RBAC和命名空间限制对集群资源的访问、使用网络策略限制集群内部流量（如pod间流量）、使用TLS进行组件间通信和etcd加密，以及合理的限制集群上资源的使用（包括pod级自身资源限制、文件挂载的只读等限制等）都会在一定程度上减少由于集群本身因素的攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;遵循安全策略&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;传统的一些安全设计理念和安全策略在云安全中依然有效。由于漏洞被暴出后，厂商往往会第一时间对其进行规避和修复，故保持组件最新状态是应对已知漏洞攻击的最简单有效的方式。此外，遵循最小化原则，使用最小的系统资源与权限、为集群service配置最小IAM权限角色也能有效缩小威胁面。最后，使用私有IP防止集群资产暴露到互联网、配置审计日志记录访问踪迹(如Kubernetes
API
审计、流式传输日志和审核&lt;a href=&#34;https://kubernetes.io/blog/2021/10/05/nsa-cisa-kubernetes-hardening-guidance/#streaming-logs-and-auditing&#34;&gt; &lt;/a&gt;）、确保组件应用或执行文件以及镜像的安全性等加固策略，也是保证集群环境安全的有效措施。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;微服务自身安全&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个相对发散的安全面，由于集群业务各不相同，微服务提供的功能接口千变万化，这里我们只讨论以集群配置的手段去削弱微服务侧带给整个集群的影响。主要的加固策略包括：设置pod安全策略使得pod间强制隔离、将集群敏感信息最小挂载、配置低可信度的容器到指定的强制隔离节点运行、使用服务网格加密通信等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用Kubesploit对Kubernetes集群进行模拟攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Kubesploit也遵从Kubernetes威胁矩阵并建立了其功能特性对威胁矩阵的映射，由图2-5可知，虽然单个攻击方式的手段覆盖率不是很高，但基本上90%的攻击方式已经得到覆盖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image8.png&#34;
style=&#34;width:3.92708in;height:3.16441in&#34; alt=&#34;mitre_pic_full.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2-5 Kubesploit MITRE地图&lt;/p&gt;
&lt;p&gt;会议上，Gerzi就如何使用Kubesploit对Kubernetes集群进行攻击进行了演示，Kubesploit的项目说明里也有一个动态图片说明了一个完整的模拟攻击过程。演示环境中，其Agent安装在docker容器内，从agent安装到向server（center）注册，仅需要几秒钟就可以建立链接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image9.gif&#34;
style=&#34;width:3.11834in;height:1.61914in&#34; alt=&#34;kubesploit&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2-6 Kubesploit 攻击示例&lt;/p&gt;
&lt;p&gt;Server端对成功注册的Agent具有完全的管理能力，可以在Server上选择对应的攻击向量在指定的Agent上执行，并将结果和过程日志回显到server端，这对红蓝对抗活动里苦于缺少容器环境攻击工具的小伙伴来说无疑是个很好的消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image10.png&#34;
style=&#34;width:3.21039in;height:2.28662in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2-7 Kubesploit 攻击信息回显&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用KubiScan对Kubernetes集群进行扫描&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;KubiScan大家可能并不
陌生，因为Gerzi在2020年的rsac上就分享这款款开源工具。该工具主要根据风险管理配置文件risky_roles.yaml对风险角色的优先级进行维护，从而识别有风险RBAC配置。&lt;/p&gt;
&lt;p&gt;执行KubiScan并携带指定的功能参数，工具就会自动对环境集群配置进行扫描，并将有风险的配置进行展示，根据扫描结果显示的风险详情，安全管理员可以针对特定的配置进行加固配置，以达到防御效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image11.png&#34;
style=&#34;width:3.40032in;height:1.52085in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;图2-8 KubiScan扫描信息展示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gerzi通过两款开源工具演示了对Kubernetes集群的攻击和防御思路，本文特意从集群的攻击面和加固知识点进行的简单的解读，由于涉及安全技术面太过宽泛，笔者无法在文中深入介绍，只能抛出来作为一个引子，希望能让我们对集群安全的轮廓有个大致了解。除此之外，笔者还想说的是Kubesploit工具。据Gerzi讲述他们开发该工具是希望通过真实性的攻击去检测集群环境是否安全，以及安全防御软件是否生效。但从笔者了解到的信息来看，仅目前的Kubesploit工具来讲，则更像是一个Kubernetes集群攻击套件向BAS演变的中间能力。笔者认为该工具最终会集合这两款工具的能力（扫描发现+真实模拟攻击），向着通过智能化+场景编排化的手段，去验证集群环境和安全防御能力的方向发展。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;参考文献&lt;/h1&gt;
&lt;p&gt;[1] &lt;sup&gt;[]&lt;/sup&gt; &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/&#34;&gt;https://kubernetes.io/docs/concepts/overview/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;sup&gt;[]&lt;/sup&gt; &lt;a href=&#34;https://stackshare.io/kubernetes&#34;&gt;https://stackshare.io/kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&#34;https://github.com/cyberark/kubesploit&#34;&gt;https://github.com/cyberark/kubesploit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&#34;https://github.com/cyberark/KubiScan&#34;&gt;https://github.com/cyberark/KubiScan&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;sup&gt;[]&lt;/sup&gt; 云原生背景下的应用安全建设&lt;/p&gt;
&lt;p&gt;[6] &lt;sup&gt;[]&lt;/sup&gt;
&lt;a href=&#34;https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/&#34;&gt;https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] &lt;sup&gt;[]&lt;/sup&gt; Attacking and Defending Kubernetes Cluster:
Kubesploit vs KubiScan&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
            <item>
                <title>K8S中的一种双栈应急方案</title>
                <link>https://cloud-Xolt.github.io/posts/2-ip-in-k8s/</link>
                <guid isPermaLink="true">https://cloud-Xolt.github.io/posts/2-ip-in-k8s/</guid>
                <pubDate>Sat, 02 Dec 2023 17:21:24 &#43;0800</pubDate>
                
                    <author>wo2g9cai@gmail.com (JOON)</author>
                
                
                
                    <description>&lt;h2 id=&#34;背景&#34;&gt;背景：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;现有业务实现在K8S架构下未实现IPV6通信；售前项目需要支持业务的IPV6通信，要求以少量时间满足需求；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器云宿主机有多张网卡，但外部组件服务（以下简称组件A）只能监听eth0;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;容器云宿主机、外部服务器配置IPV4+IPV6双栈&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器间服务使用内部clusterip（ipv4）通信&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对容器内需要访问外部IPV6的场景，开启hostnetwork共享主机网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务A监听某IPV4ip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宿主机配置haproxy4层代理， 转发IPV6到IPV4&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&#34;mark&#34;&gt;备注：
此方案仅适用于少量容器有外部IPV6通信需求&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;服务交互&#34;&gt;服务交互：&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image1.png&#34;
style=&#34;width:5.45972in;height:4.87471in&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;配置过程&#34;&gt;配置过程:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;配置宿主机双栈；&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;nmcli connection modify eth0 +ipv6.addresses 2001:250:4000:2000::22/64&lt;/p&gt;
&lt;p&gt;service network restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置haproxy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image2.png&#34;
style=&#34;width:5.51458in;height:4.58681in&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重启haproxy服务：service haproxy restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用IPV6访问检查是否成功，此处不再赘述；&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;配置需要访问外部IPV6组件的容器共享主机网络：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;kubectl edit deployment xxxx -n xxxxx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在spec下containers同级添加以下信息:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image3.png&#34;
style=&#34;width:5.54583in;height:0.60347in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;退出设置后旧的容器会自动销毁，新的配置会在新容器里生效，待容器READY后进入容器查看容器网络是否已经共享了宿主机的网络;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image4.png&#34;
style=&#34;width:5.43056in;height:4.22153in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在容器内ping以下外部组件的IPV6进行测试，&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./images/media/image5.png&#34;
style=&#34;width:5.43056in;height:0.97222in&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由此可见docker内是可以访问外部组件了。&lt;/p&gt;
&lt;h2 id=&#34;说在最后&#34;&gt;说在最后：&lt;/h2&gt;
&lt;p&gt;此方案只能当做应急方案，真正需要做到IPV6支持的话，还是建议升级K8S到支持IPV6的版本，然后选用calico配置ipv6网络池进行之间分配；&lt;/p&gt;
</description>
                
                
                
                
                
                    
                        
                    
                        
                    
                
            </item>
        
    </channel>
</rss>
